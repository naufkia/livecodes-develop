{
  "version": 3,
  "sources": ["../../src/livecodes/result/utils.ts", "../../src/livecodes/compiler/compiler-utils.ts"],
  "sourcesContent": ["// modified from https://github.com/alexindigo/precise-typeof/blob/master/index.js\nexport const typeOf = (obj: any) => {\n  function isElement(o: any) {\n    return typeof HTMLElement === 'object'\n      ? o instanceof HTMLElement\n      : o &&\n          typeof o === 'object' &&\n          o !== null &&\n          o.nodeType === 1 &&\n          typeof o.nodeName === 'string';\n  }\n  function isNode(o: any) {\n    return typeof Node === 'object'\n      ? o instanceof Node\n      : o &&\n          typeof o === 'object' &&\n          typeof o.nodeType === 'number' &&\n          typeof o.nodeName === 'string';\n  }\n  function isDocument(o: any) {\n    return Object.prototype.toString.call(o) === '[object HTMLDocument]';\n  }\n  function isWindow(o: any) {\n    return Object.prototype.toString.call(o) === '[object Window]';\n  }\n\n  const stamp: string = Object.prototype.toString.call(obj);\n\n  if (obj === undefined) return 'undefined';\n  if (obj === null) return 'null';\n\n  if (isWindow(obj)) return 'window';\n  if (isDocument(obj)) return 'document';\n  if (isElement(obj)) return 'element';\n  if (isNode(obj)) return 'node';\n\n  if (\n    obj.constructor &&\n    typeof obj.constructor.isBuffer === 'function' &&\n    obj.constructor.isBuffer(obj)\n  ) {\n    return 'buffer';\n  }\n\n  if (typeof window === 'object' && obj === window) return 'window';\n  if (typeof global === 'object' && obj === global) return 'global';\n\n  if (typeof obj === 'number' && isNaN(obj)) return 'nan';\n  if (typeof obj === 'object' && stamp === '[object Number]' && isNaN(obj)) return 'nan';\n\n  if (typeof obj === 'object' && stamp.substr(-6) === 'Event]') return 'event';\n  if (stamp.substr(0, 12) === '[object HTML') return 'element';\n  if (stamp.substr(0, 12) === '[object Node') return 'node';\n\n  // last resort\n  const type = stamp.match(/\\[object\\s*([^\\]]+)\\]/);\n  if (type) return type[1].toLowerCase();\n\n  return 'object';\n};\n\nfunction consoleArgs(args: any[]): Array<{ type: string; content: any }> {\n  return args.map((arg) => {\n    switch (typeOf(arg)) {\n      case 'window':\n      case 'function':\n      case 'date':\n      case 'symbol':\n        return { type: typeOf(arg), content: arg.toString() };\n      case 'document':\n        return { type: typeOf(arg), content: arg.documentElement.outerHTML };\n      case 'element':\n        return { type: typeOf(arg), content: arg.outerHTML };\n      case 'node':\n        return { type: typeOf(arg), content: arg.textContent };\n      case 'array':\n        return { type: typeOf(arg), content: arg.map((x: unknown) => consoleArgs([x])[0].content) };\n      case 'object':\n        return {\n          type: typeOf(arg),\n          content: Object.keys(arg).reduce(\n            (acc, key) => ({ ...acc, [key]: consoleArgs([arg[key]])[0].content }),\n            {},\n          ),\n        };\n      case 'error':\n        return {\n          type: typeOf(arg),\n          content: arg.constructor.name + ': ' + arg.message,\n        };\n    }\n    return { type: 'other', content: arg };\n  });\n}\n\nexport const proxyConsole = () => {\n  window.console = new Proxy(console, {\n    get(target, method) {\n      return function (...args: any[]) {\n        if (!(method in target)) {\n          const msg = `Uncaught TypeError: console.${String(method)} is not a function`;\n          target.error(msg);\n          parent.postMessage({ type: 'console', method: 'error', args: consoleArgs([msg]) }, '*');\n          return;\n        }\n        (target[method as keyof typeof console] as any)(...args);\n        parent.postMessage({ type: 'console', method, args: consoleArgs(args) }, '*');\n      };\n    },\n  });\n\n  window.addEventListener('error', (error) => {\n    parent.postMessage(\n      {\n        type: 'console',\n        method: 'error',\n        args: consoleArgs([error.message]),\n      },\n      '*',\n    );\n  });\n};\n\nexport const handleEval = () => {\n  window.addEventListener('message', (event) => {\n    if (event.data.console) {\n      const evalCode = () => {\n        try {\n          return {\n            type: 'console',\n            method: 'output',\n            // eslint-disable-next-line no-eval\n            args: consoleArgs([window.eval(event.data.console)]),\n          };\n        } catch (error) {\n          return { type: 'console', method: 'error', args: consoleArgs([error]) };\n        }\n      };\n      parent.postMessage(evalCode(), '*');\n    }\n  });\n};\n\nexport const handleResize = () => {\n  window.addEventListener('resize', () => {\n    parent.postMessage(\n      {\n        type: 'resize',\n        sizes: {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        },\n      },\n      '*',\n    );\n  });\n};\n", "// eslint-disable-next-line import/no-internal-modules\nimport { proxyConsole } from '../result/utils';\nimport type { InitMessage } from './models';\n\nproxyConsole();\n\n(window as any).initCompiler = async (message: InitMessage) => {\n  const baseUrl = message.baseUrl;\n  const workerUrl = baseUrl + '{{hash:compile.worker.js}}';\n  const origin = new URL(baseUrl).origin;\n  const content = `importScripts(\"${workerUrl}\");`;\n  const worker = new Worker('data:text/javascript;base64,' + btoa(content));\n\n  await new Promise<void>((resolve) => {\n    const script = document.createElement('script');\n    script.src = baseUrl + '{{hash:compile.page.js}}';\n    script.onload = () => resolve();\n    document.head.appendChild(script);\n  });\n\n  worker.addEventListener('message', async function (ev) {\n    if (ev.data.type === 'compileInCompiler') {\n      // compile message sent from compiler (e.g ts in vue)\n      worker.postMessage(ev.data);\n      return;\n    }\n    if (\n      ev.data.payload &&\n      (window as any).compilers &&\n      (window as any).compilers[ev.data.payload.language]\n    ) {\n      ev.data.payload.compiled = await (window as any).compilers[ev.data.payload.language](\n        ev.data.payload.compiled,\n        {\n          config: ev.data.payload.config,\n          language: ev.data.payload.language,\n          baseUrl,\n          options: ev.data.payload.options,\n          worker,\n        },\n      );\n    }\n    if (ev.data.trigger === 'compileInCompiler') {\n      worker.postMessage({ ...ev.data, from: 'compiler' });\n    } else {\n      parent.postMessage({ ...ev.data, from: 'compiler' }, origin);\n    }\n  });\n\n  window.addEventListener('message', async function (event) {\n    worker.postMessage(event.data);\n  });\n\n  worker.postMessage(message);\n};\n"],
  "mappings": "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",
  "names": ["typeOf", "obj", "isElement", "isNode", "isDocument", "isWindow", "stamp", "type", "consoleArgs", "args", "arg", "x", "acc", "key", "proxyConsole", "target", "method", "msg", "error", "proxyConsole", "message", "baseUrl", "workerUrl", "origin", "content", "worker", "resolve", "script", "ev", "event"]
}
