{
  "version": 3,
  "sources": ["../../src/livecodes/services/broadcast.ts", "../../src/livecodes/UI/selectors.ts", "../../src/livecodes/UI/broadcast.ts"],
  "sourcesContent": ["export const broadcastService = {\n  getUrl: () => 'https://livecodes-broadcast.onrender.com/',\n};\n", "export const getToolbarElement = () => document.querySelector('#toolbar') as HTMLElement;\nexport const getProjectTitleElement = () => document.querySelector('#project-title') as HTMLElement;\nexport const getEditorContainerElement = () =>\n  document.querySelector('#editor-container') as HTMLElement;\nexport const getEditorsElement = () => document.querySelector('#editors') as HTMLElement;\nexport const getMarkupElement = () => document.querySelector('#markup') as HTMLElement;\nexport const getStyleElement = () => document.querySelector('#style') as HTMLElement;\nexport const getScriptElement = () => document.querySelector('#script') as HTMLElement;\nexport const getOutputElement = () => document.querySelector('#output') as HTMLElement;\nexport const getResultElement = () => document.querySelector('#result') as HTMLElement;\nexport const getResultIFrameElement = () =>\n  document.querySelector('#result > iframe') as HTMLIFrameElement;\nexport const getGutterElement = () =>\n  document.querySelector('#editor-container .gutter') as HTMLElement;\nexport const getLogoLink = () => document.querySelector('#logo a') as HTMLAnchorElement;\nexport const getRunButton = () => document.querySelector('#run-button') as HTMLElement;\nexport const getCodeRunButton = () => document.querySelector('#code-run-button') as HTMLElement;\nexport const getEditorToolbar = () => document.querySelector('#editor-tools') as HTMLElement;\nexport const getCopyButton = () => document.querySelector('#editor-tools #copy-btn') as HTMLElement;\nexport const getUndoButton = () => document.querySelector('#editor-tools #undo-btn') as HTMLElement;\nexport const getRedoButton = () => document.querySelector('#editor-tools #redo-btn') as HTMLElement;\nexport const getFormatButton = () =>\n  document.querySelector('#editor-tools #format-btn') as HTMLElement;\nexport const getEditorModeNode = () => document.querySelector<HTMLElement>('#editor-mode');\nexport const getEditorStatus = () =>\n  document.querySelector('#editor-tools #editor-status') as HTMLElement;\nexport const getExternalResourcesBtn = () =>\n  document.querySelector('#editor-tools #external-resources-btn') as HTMLElement;\nexport const getExternalResourcesMark = () =>\n  document.querySelector('#editor-tools #external-resources-mark') as HTMLElement;\nexport const getResultButton = () => document.querySelector('#result-button') as HTMLElement;\nexport const getFullscreenButton = () =>\n  document.querySelector('#fullscreen-button') as HTMLElement;\nexport const getEditorTitles = () =>\n  document.querySelectorAll<HTMLElement>('.editor-title:not(.hidden)');\nexport const getEditorDivs = () => document.querySelectorAll<HTMLElement>('#editors > .editor');\nexport const getToolspaneElement = () =>\n  document.querySelector('#output #tools-pane') as HTMLElement;\nexport const getToolspaneBar = () =>\n  document.querySelector('#output #tools-pane-bar') as HTMLElement;\nexport const getToolspaneButtons = () =>\n  document.querySelector('#tools-pane-buttons') as HTMLElement;\nexport const getToolspaneTitles = () => document.querySelector<HTMLElement>('#tools-pane-titles');\nexport const getToolspaneLoader = () => document.querySelector<HTMLElement>('#tools-pane-loading');\nexport const getZoomButtonValue = () =>\n  document.querySelector<HTMLElement>('#zoom-button #zoom-value');\nexport const getModalSaveButton = () =>\n  document.querySelector('#modal #prompt-save-btn') as HTMLElement;\nexport const getModalDoNotSaveButton = () =>\n  document.querySelector('#modal #prompt-donot-save-btn') as HTMLElement;\nexport const getModalCancelButton = () =>\n  document.querySelector('#modal #prompt-cancel-btn') as HTMLElement;\n\nexport const getModalRecoverButton = () =>\n  document.querySelector('#modal #prompt-recover-btn') as HTMLElement;\nexport const getModalSavePreviousButton = () =>\n  document.querySelector('#modal #prompt-save-previous-btn') as HTMLElement;\nexport const getModalCancelRecoverButton = () =>\n  document.querySelector('#modal #prompt-cancel-recover-btn') as HTMLElement;\nexport const getModalUnsavedName = () =>\n  document.querySelector('#modal #unsaved-project-name') as HTMLElement;\nexport const getModalUnsavedLastModified = () =>\n  document.querySelector('#modal #unsaved-project-last-modified') as HTMLElement;\nexport const getModalDisableRecoverCheckbox = () =>\n  document.querySelector('#modal #disable-recover-checkbox') as HTMLInputElement;\n\nexport const getLanguageMenuLinks = () =>\n  document.querySelectorAll<HTMLElement>('#select-editor .language-item a');\n\nexport const getLanguageMenuButtons = () =>\n  document.querySelectorAll<HTMLElement>('#select-editor .language-menu-button');\n\nexport const getstyleMenu = () =>\n  document.querySelector<HTMLElement>('#style-selector .dropdown-menu');\n\nexport const getSettingToggles = () =>\n  document.querySelectorAll<HTMLInputElement>('#settings-menu input');\n\nexport const getCssPresetLinks = () =>\n  document.querySelectorAll<HTMLAnchorElement>('#css-preset-menu a');\n\nexport const getSettingsMenuScroller = () =>\n  document.querySelector<HTMLElement>('#settings-menu-container');\nexport const getSettingsButton = () => document.querySelector<HTMLElement>('#settings-button');\n\nexport const getExportJSONLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-json');\n\nexport const getExportResultLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-result');\n\nexport const getExportSourceLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-src');\n\nexport const getExportGithubGistLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-githubGist');\n\nexport const getExportCodepenLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-codepen');\n\nexport const getExportJsfiddleLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-jsfiddle');\n\nexport const getLoginLink = () => document.querySelector<HTMLAnchorElement>('#login-link');\n\nexport const getLogoutLink = () => document.querySelector<HTMLAnchorElement>('#logout-link');\n\nexport const getNewLink = () => document.querySelector<HTMLAnchorElement>('#new-link');\n\nexport const getOpenLink = () => document.querySelector<HTMLAnchorElement>('#open-link');\n\nexport const getSaveLink = () => document.querySelector<HTMLAnchorElement>('#save-link');\n\nexport const getForkLink = () => document.querySelector<HTMLAnchorElement>('#fork-link');\n\nexport const getSaveAsTemplateLink = () =>\n  document.querySelector<HTMLAnchorElement>('#template-link');\n\nexport const getExternalResourcesLink = () =>\n  document.querySelector<HTMLAnchorElement>('#external-resources-link');\n\nexport const getCustomSettingsLink = () =>\n  document.querySelector<HTMLAnchorElement>('#custom-settings-link');\n\nexport const getShareLink = () => document.querySelector<HTMLAnchorElement>('#share-link');\n\nexport const getEmbedLink = () => document.querySelector<HTMLAnchorElement>('#embed-link');\n\nexport const getEditorSettingsLink = () =>\n  document.querySelector<HTMLAnchorElement>('#editor-settings-link');\n\nexport const getDeployLink = () => document.querySelector<HTMLAnchorElement>('#deploy-link');\n\nexport const getSyncLink = () => document.querySelector<HTMLAnchorElement>('#sync-link');\n\nexport const getImportLink = () => document.querySelector<HTMLAnchorElement>('#import-link');\n\nexport const getBackupLink = () => document.querySelector<HTMLAnchorElement>('#backup-link');\n\nexport const getBroadcastLink = () => document.querySelector<HTMLAnchorElement>('#broadcast-link');\n\nexport const getAutoupdateToggle = () =>\n  document.querySelector('#settings-menu input#autoupdate') as HTMLInputElement;\n\nexport const getDelayValue = () =>\n  document.querySelector('#settings-menu #delay-value') as HTMLElement;\n\nexport const getDelayRange = () =>\n  document.querySelector('#settings-menu input#delay-range') as HTMLInputElement;\n\nexport const getAutosaveToggle = () =>\n  document.querySelector('#settings-menu input#autosave') as HTMLInputElement;\n\nexport const getAutosyncToggle = () =>\n  document.querySelector('#settings-menu input#autosync') as HTMLInputElement;\n\nexport const getFormatOnsaveToggle = () =>\n  document.querySelector('#settings-menu input#formatOnsave') as HTMLInputElement;\n\nexport const getProcessorToggles = () =>\n  document.querySelectorAll<HTMLInputElement>('#style-selector input');\n\nexport const getEmmetToggle = () =>\n  document.querySelector('#settings-menu input#emmet') as HTMLInputElement;\n\nexport const getThemeToggle = () =>\n  document.querySelector('#settings-menu input#theme') as HTMLInputElement;\n\nexport const getRecoverToggle = () =>\n  document.querySelector('#settings-menu input#recover-unsaved') as HTMLInputElement;\n\nexport const getSpacingToggle = () =>\n  document.querySelector('#settings-menu input#show-spacing') as HTMLInputElement;\n\nexport const getCSSPresetLinks = () =>\n  document.querySelectorAll<HTMLAnchorElement>('#css-preset-menu a');\n\nexport const getProjectInfoLink = () =>\n  document.querySelector('#settings-menu #info-link') as HTMLInputElement;\n\nexport const getAssetsLink = () =>\n  document.querySelector('#settings-menu #assets-link') as HTMLInputElement;\n\nexport const getSnippetsLink = () =>\n  document.querySelector('#settings-menu #snippets-link') as HTMLInputElement;\n\nexport const getInfoTitleInput = () =>\n  document.querySelector('#info-container input#title-input') as HTMLInputElement;\n\nexport const getInfoDescription = () =>\n  document.querySelector('#info-container #description-textarea') as HTMLTextAreaElement;\n\nexport const getInfoTagsInput = () =>\n  document.querySelector('#info-container input#tags-input') as HTMLInputElement;\n\nexport const getSaveInfoButton = () =>\n  document.querySelector<HTMLElement>('#info-container #info-save-btn');\n\nexport const getExternalResourcesTextareas = () =>\n  document.querySelectorAll<HTMLTextAreaElement>('#resources-container textarea');\n\nexport const getLoadResourcesButton = () =>\n  document.querySelector<HTMLElement>('#resources-container #resources-load-btn');\n\nexport const getCustomSettingsEditor = () =>\n  document.querySelector<HTMLElement>('#custom-settings-container #custom-settings-editor');\n\nexport const getLoadCustomSettingsButton = () =>\n  document.querySelector<HTMLElement>('#custom-settings-container #custom-settings-load-btn');\n\nexport const getTestEditor = () =>\n  document.querySelector<HTMLElement>('#test-editor-container #test-editor');\n\nexport const getLoadTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-editor-container #test-load-btn');\n\nexport const getEditTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-container #edit-tests-btn');\n\nexport const getRunTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-container #run-tests-btn');\n\nexport const getWatchTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-container #watch-tests-btn');\n\nexport const getUrlImportForm = (importContainer: HTMLElement) =>\n  importContainer.querySelector<HTMLFormElement>('#url-import-form');\nexport const getUrlImportButton = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#url-import-btn') as HTMLButtonElement;\nexport const getUrlImportInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#code-url') as HTMLInputElement;\nexport const getCodeImportInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#local-code-input') as HTMLInputElement;\n\nexport const getImportJsonUrlForm = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#json-url-import-form') as HTMLInputElement;\nexport const getImportJsonUrlButton = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#json-url-import-btn') as HTMLInputElement;\nexport const getImportJsonUrlInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#json-url') as HTMLInputElement;\n\nexport const getBulkImportJsonUrlForm = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-json-url-import-form') as HTMLInputElement;\nexport const getBulkImportJsonUrlButton = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-json-url-import-btn') as HTMLInputElement;\nexport const getBulkImportJsonUrlInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-json-url') as HTMLInputElement;\nexport const getLinkToSavedProjects = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#link-to-saved-projects') as HTMLAnchorElement;\n\nexport const getImportFileInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#file-input') as HTMLInputElement;\n\nexport const getBulkImportFileInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-file-input') as HTMLInputElement;\n\nexport const getNewRepoForm = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector<HTMLFormElement>('#new-repo-form');\nexport const getNewRepoButton = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-btn') as HTMLButtonElement;\nexport const getNewRepoNameInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-name') as HTMLInputElement;\nexport const getNewRepoNameError = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-name-error') as HTMLElement;\nexport const getNewRepoMessageInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-message') as HTMLInputElement;\nexport const getNewRepoCommitSource = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-source') as HTMLInputElement;\nexport const getNewRepoAutoSync = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-autosync') as HTMLInputElement;\n\nexport const getExistingRepoForm = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector<HTMLFormElement>('#existing-repo-form');\nexport const getExistingRepoButton = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-btn') as HTMLButtonElement;\nexport const getExistingRepoNameInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-name') as HTMLInputElement;\nexport const getExistingRepoMessageInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-message') as HTMLInputElement;\nexport const getExistingRepoCommitSource = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-source') as HTMLInputElement;\nexport const getExistingRepoAutoSync = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-autosync') as HTMLInputElement;\n\nexport const getStarterTemplatesTab = (templatesContainer: HTMLElement) =>\n  templatesContainer.querySelector<HTMLElement>(\n    '#templates-tabs [data-target=\"templates-starter\"]',\n  );\nexport const getStarterTemplatesList = (templatesContainer: HTMLElement) =>\n  templatesContainer.querySelector<HTMLElement>('#starter-templates-list');\nexport const getUserTemplatesScreen = (templatesContainer: HTMLElement) =>\n  templatesContainer.querySelector('#templates-user .modal-screen') as HTMLElement;\n\nexport const getBulkImportButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#bulk-import-button') as HTMLElement;\n\nexport const getExportAllButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#export-all-button') as HTMLElement;\n\nexport const getDeleteAllButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#delete-all-button') as HTMLElement;\n\nexport const getAddAssetButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#assets-add-asset-button') as HTMLElement;\n\nexport const getAssetsDeleteAllButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#assets-delete-all-button') as HTMLElement;\n\nexport const getAssetsButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#assets-button') as HTMLElement;\n\nexport const getAssetDataUrlFileInput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-data-url-file-input') as HTMLInputElement;\n\nexport const getAssetDataUrlOutput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#data-url-output') as HTMLElement;\n\nexport const getAssetGHPagesFileInput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-gh-pages-file-input') as HTMLInputElement;\n\nexport const getAssetGHPagesFileInputLabel = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-gh-pages-file-input-label') as HTMLElement;\n\nexport const getAssetGHPagesFileInputButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-gh-pages-file-input-button') as HTMLElement;\n\nexport const getAssetGHPagesOutput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#gh-pages-output') as HTMLElement;\n\nexport const getSyncStatus = (syncContainer: HTMLElement | undefined) =>\n  (syncContainer || document).querySelector<HTMLElement>('#sync-status');\n\nexport const getStartSyncBtns = (syncContainer: HTMLElement | undefined) =>\n  (syncContainer || document).querySelectorAll<HTMLButtonElement>('.start-sync-btn');\n\nexport const getBackupForm = (backupContainer: HTMLElement) =>\n  backupContainer.querySelector('#backup-form') as HTMLFormElement;\n\nexport const getBackupBtn = (backupContainer: HTMLElement) =>\n  backupContainer.querySelector('#backup-btn') as HTMLButtonElement;\n\nexport const getBackupCheckedInputs = (backupContainer: HTMLElement) =>\n  backupContainer.querySelectorAll<HTMLInputElement>('#backup input[type=\"checkbox\"]:checked');\n\nexport const getAddSnippetButton = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#snippets-add-snippet-button') as HTMLElement;\n\nexport const getSnippetsDeleteAllButton = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#snippets-delete-all-button') as HTMLElement;\n\nexport const getSnippetLanguageSelect = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#language-select') as HTMLSelectElement;\n\nexport const getAddSnippetEditor = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-editor') as HTMLElement;\n\nexport const getSnippetTitleInput = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-title-input') as HTMLInputElement;\n\nexport const getSnippetDescriptionArea = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-description-textarea') as HTMLTextAreaElement;\n\nexport const getSaveSnippetBtn = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-save-btn') as HTMLButtonElement;\n\nexport const getSnippetsBtn = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#snippets-button') as HTMLButtonElement;\n\nexport const getBroadcastStatusLabel = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-status') as HTMLElement;\n\nexport const getBroadcastForm = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-form') as HTMLFormElement;\n\nexport const getBroadcastServerUrlInput = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-server-url') as HTMLInputElement;\n\nexport const getBroadcastSourceCheckbox = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-source') as HTMLInputElement;\n\nexport const getBroadcastBtn = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-btn') as HTMLButtonElement;\n\nexport const getBroadcastChannelUrlSection = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-channel-url-section') as HTMLElement;\n\nexport const getBroadcastChannelUrl = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-channel-url') as HTMLAnchorElement;\n\nexport const getBroadcastStatusBtn = () =>\n  document.querySelector('#broadcast-status-btn') as HTMLElement | null;\n\nexport const getQrCodeContainer = () => document.querySelector('#qrcode-container') as HTMLElement;\n\nexport const getEditorSettingsFormatLink = (editorSettingsContainer: HTMLElement) =>\n  editorSettingsContainer.querySelector('#editor-settings-format-link') as HTMLAnchorElement;\n", "/* eslint-disable import/no-internal-modules */\nimport type { createEventsManager } from '../events';\nimport type { createModal } from '../modal';\nimport type { createNotifications } from '../notifications';\nimport type { AppData } from '../models';\nimport { broadcastScreen } from '../html';\nimport { broadcastService } from '../services/broadcast';\nimport {\n  getBroadcastBtn,\n  getBroadcastChannelUrl,\n  getBroadcastChannelUrlSection,\n  getBroadcastForm,\n  getBroadcastServerUrlInput,\n  getBroadcastSourceCheckbox,\n  getBroadcastStatusLabel,\n} from './selectors';\n\nexport interface BroadcastInfo {\n  isBroadcasting: boolean;\n  channel: string;\n  channelUrl: string;\n  channelToken: string;\n  broadcastSource: boolean;\n}\nexport type BroadcastData = BroadcastInfo & AppData['broadcast'];\nexport interface BroadcastResponseData {\n  channel: string;\n  channelUrl: string;\n  channelToken?: string;\n}\nexport interface BroadcastResponseError {\n  error: string;\n}\n\nexport const createBroadcastUI = async ({\n  modal,\n  notifications,\n  eventsManager,\n  deps,\n}: {\n  modal: ReturnType<typeof createModal>;\n  notifications: ReturnType<typeof createNotifications>;\n  eventsManager: ReturnType<typeof createEventsManager>;\n  deps: {\n    getBroadcastData: () => BroadcastData | null;\n    setBroadcastData: (broadcastData: BroadcastData) => void;\n    broadcast: (\n      broadcastData: Partial<BroadcastData>,\n    ) => Promise<BroadcastResponseData | BroadcastResponseError | undefined>;\n  };\n}) => {\n  const div = document.createElement('div');\n  div.innerHTML = broadcastScreen;\n  const broadcastContainer = div.firstChild as HTMLElement;\n  modal.show(broadcastContainer);\n\n  const broadcastStatusLabel = getBroadcastStatusLabel(broadcastContainer);\n  const broadcastForm = getBroadcastForm(broadcastContainer);\n  const broadcastServerUrlInput = getBroadcastServerUrlInput(broadcastContainer);\n  const broadcastSourceCheckbox = getBroadcastSourceCheckbox(broadcastContainer);\n  const broadcastBtn = getBroadcastBtn(broadcastContainer);\n  const broadcastChannelUrlSection = getBroadcastChannelUrlSection(broadcastContainer);\n  const broadcastChannelUrl = getBroadcastChannelUrl(broadcastContainer);\n\n  let broadcastData = deps.getBroadcastData();\n\n  const updateBroadcastUI = () => {\n    broadcastBtn.disabled = false;\n    broadcastData = deps.getBroadcastData();\n\n    if (broadcastData?.isBroadcasting) {\n      broadcastStatusLabel.innerText = 'Broadcasting...';\n      broadcastServerUrlInput.disabled = true;\n      broadcastSourceCheckbox.disabled = true;\n      broadcastBtn.innerText = 'Stop broadcast';\n      broadcastSourceCheckbox.checked = broadcastData?.broadcastSource === true;\n      if (broadcastData?.channelUrl) {\n        broadcastChannelUrlSection.style.display = 'unset';\n        broadcastChannelUrl.innerText = broadcastData.channelUrl;\n        broadcastChannelUrl.href = broadcastData.channelUrl;\n      }\n    } else {\n      broadcastStatusLabel.innerText = '';\n      broadcastServerUrlInput.disabled = false;\n      broadcastSourceCheckbox.disabled = false;\n      broadcastBtn.innerText = 'Broadcast';\n      broadcastChannelUrlSection.style.display = 'none';\n    }\n\n    broadcastServerUrlInput.value =\n      broadcastServerUrlInput.value.trim() || broadcastData?.serverUrl || broadcastService.getUrl();\n  };\n  updateBroadcastUI();\n\n  eventsManager.addEventListener(broadcastForm, 'submit', async (ev) => {\n    ev.preventDefault();\n\n    broadcastData = deps.getBroadcastData();\n\n    if (broadcastData?.isBroadcasting) {\n      const url = broadcastData.serverUrl;\n      fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          channel: broadcastData.channel,\n          channelToken: broadcastData.channelToken,\n          stop: true,\n        }),\n      }).catch(() => undefined);\n      deps.setBroadcastData({\n        isBroadcasting: false,\n        channel: '',\n        channelUrl: '',\n        channelToken: '',\n        broadcastSource: false,\n        serverUrl: url,\n      });\n      updateBroadcastUI();\n      return;\n    }\n\n    const serverUrl = broadcastServerUrlInput.value.trim();\n    if (!serverUrl) {\n      notifications.error('Server URL is required!');\n      return;\n    }\n\n    broadcastBtn.disabled = true;\n    broadcastBtn.innerText = 'Connecting...';\n\n    const result = await deps.broadcast({\n      serverUrl,\n      channel: '', // do not use saved\n      channelToken: '', // do not use saved\n      broadcastSource: broadcastSourceCheckbox.checked,\n    });\n    if (!result || 'error' in result) {\n      notifications.error('Broadcast failed!');\n      updateBroadcastUI();\n      return;\n    }\n\n    deps.setBroadcastData({\n      isBroadcasting: true,\n      serverUrl,\n      channel: result.channel,\n      channelUrl: result.channelUrl,\n      channelToken: result.channelToken || '',\n      broadcastSource: broadcastSourceCheckbox.checked,\n    });\n    updateBroadcastUI();\n    notifications.success('Broadcasting...');\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAO,IAAMA,EAAmB,CAC9B,OAAQ,IAAM,2CAChB,EC8WO,IAAMC,EAA2BC,GACtCA,EAAmB,cAAc,mBAAmB,EAEzCC,EAAoBD,GAC/BA,EAAmB,cAAc,iBAAiB,EAEvCE,EAA8BF,GACzCA,EAAmB,cAAc,uBAAuB,EAE7CG,EAA8BH,GACzCA,EAAmB,cAAc,mBAAmB,EAEzCI,EAAmBJ,GAC9BA,EAAmB,cAAc,gBAAgB,EAEtCK,EAAiCL,GAC5CA,EAAmB,cAAc,gCAAgC,EAEtDM,EAA0BN,GACrCA,EAAmB,cAAc,wBAAwB,ECjWpD,IAAMO,EAAoB,MAAO,CACtC,MAAAC,EACA,cAAAC,EACA,cAAAC,EACA,KAAAC,CACF,IAWM,CACJ,IAAMC,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,UAAYC,EAChB,IAAMC,EAAqBF,EAAI,WAC/BJ,EAAM,KAAKM,CAAkB,EAE7B,IAAMC,EAAuBC,EAAwBF,CAAkB,EACjEG,EAAgBC,EAAiBJ,CAAkB,EACnDK,EAA0BC,EAA2BN,CAAkB,EACvEO,EAA0BC,EAA2BR,CAAkB,EACvES,EAAeC,EAAgBV,CAAkB,EACjDW,EAA6BC,EAA8BZ,CAAkB,EAC7Ea,EAAsBC,EAAuBd,CAAkB,EAEjEe,EAAgBlB,EAAK,iBAAiB,EAEpCmB,EAAoB,IAAM,CAC9BP,EAAa,SAAW,GACxBM,EAAgBlB,EAAK,iBAAiB,EAElCkB,GAAe,gBACjBd,EAAqB,UAAY,kBACjCI,EAAwB,SAAW,GACnCE,EAAwB,SAAW,GACnCE,EAAa,UAAY,iBACzBF,EAAwB,QAAUQ,GAAe,kBAAoB,GACjEA,GAAe,aACjBJ,EAA2B,MAAM,QAAU,QAC3CE,EAAoB,UAAYE,EAAc,WAC9CF,EAAoB,KAAOE,EAAc,cAG3Cd,EAAqB,UAAY,GACjCI,EAAwB,SAAW,GACnCE,EAAwB,SAAW,GACnCE,EAAa,UAAY,YACzBE,EAA2B,MAAM,QAAU,QAG7CN,EAAwB,MACtBA,EAAwB,MAAM,KAAK,GAAKU,GAAe,WAAaE,EAAiB,OAAO,CAChG,EACAD,EAAkB,EAElBpB,EAAc,iBAAiBO,EAAe,SAAU,MAAOe,GAAO,CAKpE,GAJAA,EAAG,eAAe,EAElBH,EAAgBlB,EAAK,iBAAiB,EAElCkB,GAAe,eAAgB,CACjC,IAAMI,EAAMJ,EAAc,UAC1B,MAAMI,EAAK,CACT,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,UAAU,CACnB,QAASJ,EAAc,QACvB,aAAcA,EAAc,aAC5B,KAAM,EACR,CAAC,CACH,CAAC,EAAE,MAAM,IAAG,EAAY,EACxBlB,EAAK,iBAAiB,CACpB,eAAgB,GAChB,QAAS,GACT,WAAY,GACZ,aAAc,GACd,gBAAiB,GACjB,UAAWsB,CACb,CAAC,EACDH,EAAkB,EAClB,MACF,CAEA,IAAMI,EAAYf,EAAwB,MAAM,KAAK,EACrD,GAAI,CAACe,EAAW,CACdzB,EAAc,MAAM,yBAAyB,EAC7C,MACF,CAEAc,EAAa,SAAW,GACxBA,EAAa,UAAY,gBAEzB,IAAMY,EAAS,MAAMxB,EAAK,UAAU,CAClC,UAAAuB,EACA,QAAS,GACT,aAAc,GACd,gBAAiBb,EAAwB,OAC3C,CAAC,EACD,GAAI,CAACc,GAAU,UAAWA,EAAQ,CAChC1B,EAAc,MAAM,mBAAmB,EACvCqB,EAAkB,EAClB,MACF,CAEAnB,EAAK,iBAAiB,CACpB,eAAgB,GAChB,UAAAuB,EACA,QAASC,EAAO,QAChB,WAAYA,EAAO,WACnB,aAAcA,EAAO,cAAgB,GACrC,gBAAiBd,EAAwB,OAC3C,CAAC,EACDS,EAAkB,EAClBrB,EAAc,QAAQ,iBAAiB,CACzC,CAAC,CACH",
  "names": ["broadcastService", "getBroadcastStatusLabel", "broadcastContainer", "getBroadcastForm", "getBroadcastServerUrlInput", "getBroadcastSourceCheckbox", "getBroadcastBtn", "getBroadcastChannelUrlSection", "getBroadcastChannelUrl", "createBroadcastUI", "modal", "notifications", "eventsManager", "deps", "div", "broadcast_default", "broadcastContainer", "broadcastStatusLabel", "getBroadcastStatusLabel", "broadcastForm", "getBroadcastForm", "broadcastServerUrlInput", "getBroadcastServerUrlInput", "broadcastSourceCheckbox", "getBroadcastSourceCheckbox", "broadcastBtn", "getBroadcastBtn", "broadcastChannelUrlSection", "getBroadcastChannelUrlSection", "broadcastChannelUrl", "getBroadcastChannelUrl", "broadcastData", "updateBroadcastUI", "broadcastService", "ev", "url", "serverUrl", "result"]
}
