{
  "version": 3,
  "sources": ["../../src/livecodes/vendors.ts", "../../src/livecodes/services/github.ts", "../../src/livecodes/UI/selectors.ts", "../../src/livecodes/UI/sync-ui.ts"],
  "sourcesContent": ["export const vendorsBaseUrl =\n  'https://cdn.jsdelivr.net/npm/@live-codes/browser-compilers@0.5.13/dist/';\n\nexport const acornUrl = 'https://cdn.jsdelivr.net/npm/acorn@8.6.0/dist/acorn.min.js';\n\nexport const artTemplateUrl =\n  'https://cdn.jsdelivr.net/npm/art-template@4.13.2/lib/template-web.js';\n\nexport const asciidocUrl =\n  'https://cdn.jsdelivr.net/npm/@asciidoctor/core@2.2.5/dist/browser/asciidoctor.min.js';\n\nexport const assemblyscriptSdkUrl =\n  'https://cdn.jsdelivr.net/npm/assemblyscript@0.19.22/dist/sdk.js';\n\nexport const assemblyscriptLoaderUrl =\n  'https://cdn.jsdelivr.net/npm/@assemblyscript/loader@0.19.22/umd/index.js';\n\nexport const astringUrl = 'https://cdn.jsdelivr.net/npm/astring@1.7.5/dist/astring.min.js';\n\nexport const astroBaseUrl = 'https://cdn.jsdelivr.net/npm/@hatemhosny/astro-internal@0.0.4/';\n\nexport const astroWasmURL = 'https://cdn.jsdelivr.net/npm/@astrojs/compiler@0.9.2/astro.wasm';\n\nexport const autoCompleteUrl =\n  'https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.6/dist/autoComplete.min.js';\n\nexport const babelUrl = 'https://cdn.jsdelivr.net/npm/@babel/standalone@7.17.2/babel.min.js';\n\nexport const biwaschemeUrl =\n  'https://cdn.jsdelivr.net/npm/biwascheme@0.7.4/release/biwascheme-min.js';\n\nexport const blocklyCdnBaseUrl = 'https://cdn.jsdelivr.net/npm/blockly@7.20211209.2/';\n\nexport const brythonBaseUrl = 'https://cdn.jsdelivr.net/npm/brython@3.10.4/';\n\nexport const chaiUrl = 'https://cdn.jsdelivr.net/npm/chai@4.3.6/+esm';\n\nexport const chaiTypesUrl = 'https://cdn.jsdelivr.net/npm/@types/chai@4.2.22/index.d.ts';\n\nexport const cjs2esUrl = 'https://cdn.jsdelivr.net/npm/cjs2es@1.1.1/dist/cjs2es.browser.min.js';\n\nexport const clioBaseUrl =\n  'https://cdn.jsdelivr.net/npm/@live-codes/clio-browser-compiler@0.0.3/public/build/';\n\nexport const coffeeScriptUrl =\n  'https://cdn.jsdelivr.net/npm/coffeescript@2.6.1/lib/coffeescript-browser-compiler-legacy/coffeescript.js';\n\nexport const cppWasmBaseUrl = 'https://cdn.jsdelivr.net/npm/@chriskoch/cpp-wasm@1.0.2';\n\nexport const csstreeUrl = 'https://cdn.jsdelivr.net/npm/css-tree@1.1.3/dist/csstree.min.js';\n\nexport const cytoscapeSvgUrl =\n  'https://cdn.jsdelivr.net/npm/cytoscape-svg@0.4.0/cytoscape-svg.min.js';\n\nexport const cytoscapeUrl = 'https://cdn.jsdelivr.net/npm/cytoscape@3.22.0/dist/cytoscape.min.js';\n\nexport const dotUrl = 'https://cdn.jsdelivr.net/npm/dot@1.1.3/doT.min.js';\n\nexport const ejsUrl = 'https://cdn.jsdelivr.net/npm/ejs@3.1.6/ejs.min.js';\n\nexport const elkjsBaseUrl = 'https://cdn.jsdelivr.net/npm/elkjs@0.7.1/lib/';\n\nexport const emmetMonacoUrl =\n  'https://cdn.jsdelivr.net/npm/emmet-monaco-es@5.0.0/dist/emmet-monaco.min.js';\n\nexport const esModuleShimsUrl =\n  'https://cdn.jsdelivr.net/npm/es-module-shims@1.4.4/dist/es-module-shims.min.js';\n\nexport const flexSearchUrl =\n  'https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.min.js';\n\nexport const fontAnonymousProUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/anonymous-pro@4.5.9/index.min.css';\n\nexport const fontCascadiaCodeUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/cascadia-code@4.2.1/index.min.css';\n\nexport const fontCodeNewRomanUrl = 'https://fonts.cdnfonts.com/css/code-new-roman-2';\n\nexport const fontComicMonoUrl = 'https://cdn.jsdelivr.net/npm/comic-mono@0.0.1/index.min.css';\n\nexport const fontCourierPrimeUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/courier-prime@4.5.9/index.min.css';\n\nexport const fontDECTerminalModernUrl = 'https://fonts.cdnfonts.com/css/dec-terminal-modern';\n\nexport const fontDejaVuMonoUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/dejavu-mono@4.5.4/index.min.css';\n\nexport const fontFantasqueUrl =\n  'https://cdn.jsdelivr.net/npm/@typopro/web-fantasque-sans-mono@3.7.5/TypoPRO-FantasqueSansMono.css';\n\nexport const fontFiraCodeUrl = 'https://cdn.jsdelivr.net/npm/firacode@6.2.0/distr/fira_code.css';\n\nexport const fontFixedsysUrl = 'https://fonts.cdnfonts.com/css/fixedsys-62';\n\nexport const fontHackUrl = 'https://cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css';\n\nexport const fontHermitUrl = 'https://cdn.jsdelivr.net/npm/typeface-hermit@0.0.44/index.min.css';\n\nexport const fontIBMPlexMonoUrl =\n  'https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&display=swap';\n\nexport const fontInconsolataUrl =\n  'https://fonts.googleapis.com/css2?family=Inconsolata&display=swap';\n\nexport const fontIosevkaUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/iosevka@4.5.4/index.min.css';\n\nexport const fontJetbrainsMonoUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/jetbrains-mono@4.5.11/index.min.css';\n\nexport const fontMenloUrl = 'https://fonts.cdnfonts.com/css/menlo';\n\nexport const fontMonofurUrl = 'https://fonts.cdnfonts.com/css/monofur';\n\nexport const fontMonoidUrl =\n  'https://cdn.jsdelivr.net/npm/@typopro/web-monoid@3.7.5/TypoPRO-Monoid.css';\n\nexport const fontNotoUrl = 'https://fonts.googleapis.com/css2?family=Noto+Sans+Mono&display=swap';\n\nexport const fontNovaMonoUrl = 'https://fonts.googleapis.com/css2?family=Nova+Mono&display=swap';\n\nexport const fontOpenDyslexicUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/opendyslexic@4.5.4/index.min.css';\n\nexport const fontProFontWindowsUrl = 'https://fonts.cdnfonts.com/css/profontwindows';\n\nexport const fontRobotoMonoUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/roboto-mono@4.5.8/index.min.css';\n\nexport const fontSFMonoUrl = 'https://fonts.cdnfonts.com/css/sf-mono';\n\nexport const fontSourceCodeProUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/source-code-pro@4.5.12/index.min.css';\n\nexport const fontSpaceMonoUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/space-mono@4.5.10/index.min.css';\n\nexport const fontSudoVarUrl = 'https://fonts.cdnfonts.com/css/sudo-var';\n\nexport const fontUbuntuMonoUrl =\n  'https://cdn.jsdelivr.net/npm/@fontsource/ubuntu-mono@4.5.11/index.min.css';\n\nexport const fontVictorMonoUrl = 'https://cdn.jsdelivr.net/npm/victormono@1.5.4/dist/index.min.css';\n\nexport const fscreenUrl = 'https://cdn.jsdelivr.net/npm/fscreen@1.2.0/dist/fscreen.esm.js';\n\nexport const githubMarkdownCss =\n  'https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css';\n\nexport const go2jsBaseUrl = 'https://cdn.jsdelivr.net/npm/@live-codes/go2js@0.3.0/build';\n\nexport const graphreCdnUrl = 'https://cdn.jsdelivr.net/npm/graphre@0.1.3/dist/graphre.js';\n\nexport const handlebarsBaseUrl = 'https://cdn.jsdelivr.net/npm/handlebars@4.7.7/dist/';\n\nexport const highlightjsUrl =\n  'https://cdn.skypack.dev/pin/highlight.js@v11.5.1-ByzFRPBe5lvvwKChRHdq/mode=imports,min/optimized/highlightjs.js';\n\nexport const hintCssUrl = 'https://cdn.jsdelivr.net/npm/hint.css@2.7.0/hint.min.css';\n\nexport const hpccJsCdnUrl = 'https://cdn.jsdelivr.net/npm/@hpcc-js/wasm@1.12.9/dist/index.min.js';\n\nexport const imbaBaseUrl = 'https://cdn.jsdelivr.net/npm/imba@2.0.0-alpha.201/dist/';\n\nexport const jestLiteUrl = 'https://cdn.jsdelivr.net/npm/jest-lite@1.0.0-alpha.4/dist/core.js';\n\nexport const jestTypesUrl = 'https://cdn.jsdelivr.net/npm/@types/jest@27.4.1/index.d.ts';\n\nexport const jsclUrl = 'https://cdn.jsdelivr.net/npm/jscl@0.8.2/jscl.min.js';\n\nexport const jsZipUrl =\n  'https://cdn.skypack.dev/-/jszip@v3.7.1-quihaZrSeNyrwABoIb7Z/dist=es2020,mode=imports,min/optimized/jszip.js';\n\nexport const juliaWasmBaseUrl = 'https://cdn.jsdelivr.net/npm/@chriskoch/julia-wasm@1.0.4';\n\nexport const liquidJsUrl =\n  'https://cdn.jsdelivr.net/npm/liquidjs@9.34.0/dist/liquid.browser.min.js';\n\nexport const localforageUrl =\n  'https://cdn.jsdelivr.net/npm/localforage@1.10.0/dist/localforage.min.js';\n\nexport const luaUrl = 'https://cdn.jsdelivr.net/npm/fengari-web@0.1.4/dist/fengari-web.min.js';\n\nexport const lunaObjViewerStylesUrl =\n  'https://cdn.jsdelivr.net/npm/luna-object-viewer@0.2.0/luna-object-viewer.css';\n\nexport const lunaConsoleStylesUrl =\n  'https://cdn.jsdelivr.net/npm/luna-console@0.2.1/luna-console.css';\n\nexport const malinaUrl = 'https://cdn.jsdelivr.net/npm/malinajs@0.6.52/malina.js';\n\nexport const markedUrl = 'https://cdn.jsdelivr.net/npm/marked@4.0.12/marked.min.js';\n\nexport const mermaidCdnUrl = 'https://cdn.jsdelivr.net/npm/mermaid@9.1.3/dist/mermaid.min.js';\n\nexport const monacoEmacsUrl = 'https://unpkg.com/monaco-emacs@0.3.0/dist/monaco-emacs.js';\n\nexport const monacoVimUrl = 'https://unpkg.com/monaco-vim@0.3.5/dist/monaco-vim.js';\n\nexport const mustacheUrl = 'https://cdn.jsdelivr.net/npm/mustache@4.2.0/mustache.min.js';\n\nexport const nomnomlCdnUrl = 'https://cdn.jsdelivr.net/npm/nomnoml@1.4.0/dist/nomnoml.min.js';\n\nexport const normalizeCssUrl = 'https://cdn.jsdelivr.net/npm/normalize.css@8.0.1/normalize.min.css';\n\nexport const nunjucksBaseUrl = 'https://cdn.jsdelivr.net/npm/nunjucks@3.2.3/browser/';\n\nexport const opalBaseUrl = 'https://cdn.opalrb.com/opal/1.4.1/';\n\nexport const parinferUrl =\n  'https://cdn.jsdelivr.net/npm/@chrisoakman/parinfer@3.13.1/parinfer.min.js';\n\nexport const pintoraUrl =\n  'https://cdn.jsdelivr.net/npm/@pintora/standalone@0.1.0/lib/pintora-standalone.umd.min.js';\n\nexport const plotlyCdnUrl = 'https://cdn.jsdelivr.net/npm/plotly.js@2.9.0/dist/plotly.min.js';\n\nexport const postcssImportUrlUrl =\n  'https://cdn.jsdelivr.net/npm/@live-codes/postcss-import-url@0.1.2/dist/postcss-import-url.js';\n\nexport const prettierBaseUrl = 'https://cdn.jsdelivr.net/npm/prettier@2.5.1/';\n\nexport const prettierPhpUrl =\n  'https://cdn.jsdelivr.net/npm/@prettier/plugin-php@0.18.0/standalone.js';\n\nexport const prismBaseUrl = 'https://cdn.jsdelivr.net/npm/prismjs@1.26.0/components/';\n\nexport const pyodideBaseUrl = 'https://cdn.jsdelivr.net/pyodide/v0.18.1/full/';\n\nexport const qrcodeUrl = 'https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js';\n\nexport const quillEditorCdnBaseUrl = 'https://cdn.jsdelivr.net/npm/quill@2.0.0-dev.4/dist';\n\nexport const quillHtmlEditUrl =\n  'https://cdn.jsdelivr.net/npm/quill-html-edit-button@2.2.7/dist/quill.htmlEditButton.min.js';\n\nexport const quillBlotFormaterUrl =\n  'https://cdn.jsdelivr.net/npm/quill-blot-formatter@1.0.5/dist/quill-blot-formatter.min.js';\n\nexport const quillBetterTableBaseUrl =\n  'https://cdn.jsdelivr.net/npm/quill-better-table@1.2.10/dist';\n\nexport const requireUrl = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js';\n\nexport const rescriptCompilerUrl = 'https://cdn.rescript-lang.org/v9.1.2/compiler.js';\n\nexport const rescriptReactUrl = 'https://cdn.rescript-lang.org/v9.1.2/%40rescript/react/cmij.js';\n\nexport const rescriptStdLibBaseUrl = 'https://cdn.jsdelivr.net/npm/@rescript/std@9.1.3/lib/es6/';\n\nexport const resetCssUrl = 'https://cdn.jsdelivr.net/npm/reset-css@5.0.1/reset.min.css';\n\nexport const riotBaseUrl = 'https://cdn.jsdelivr.net/npm/riot@6.1.2/';\n\nexport const snackbarUrl =\n  'https://cdn.jsdelivr.net/npm/@snackbar/core@1.7.0/dist/snackbar.min.css';\n\nexport const spacingJsUrl = 'https://cdn.jsdelivr.net/npm/spacingjs@1.0.7/dist/bundle.min.js';\n\nexport const sqlFormatterUrl =\n  'https://cdn.jsdelivr.net/npm/sql-formatter@4.0.2/dist/sql-formatter.min.js';\n\nexport const sqljsBaseUrl = 'https://cdn.jsdelivr.net/npm/sql.js@1.6.2/dist/';\n\nexport const stencilUrl =\n  'https://cdn.jsdelivr.net/npm/@stencil/core@2.13.0/compiler/stencil.min.js';\n\nexport const svgbobWasmCdnUrl =\n  'https://cdn.jsdelivr.net/npm/svgbob-wasm@0.4.1-a0/svgbob_wasm_bg.wasm';\n\nexport const tagifyBaseUrl = 'https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.9.6/dist/';\n\nexport const tailwindcssUrl =\n  'https://cdn.jsdelivr.net/npm/@live-codes/tailwindcss-browser-plugin@0.3.2/dist/tailwindcss.umd.min.js';\n\nexport const tauPrologBaseUrl = 'https://cdn.jsdelivr.net/npm/tau-prolog@0.3.2/modules/';\n\nexport const twigUrl = 'https://cdn.jsdelivr.net/npm/twig@1.15.4/twig.min.js';\n\nexport const typescriptUrl = 'https://cdn.jsdelivr.net/npm/typescript@4.5.5/lib/typescript.min.js';\n\nexport const uniterUrl = 'https://cdn.jsdelivr.net/npm/uniter@2.17.0/dist/uniter.js';\n\nexport const vegaCdnUrl = 'https://cdn.jsdelivr.net/npm/vega@5.21.0/build/vega.min.js';\n\nexport const vegaLiteCdnUrl = 'https://cdn.jsdelivr.net/npm/vega-lite@5.2.0/build/vega-lite.min.js';\n\nexport const vueSfcLoaderCdnBaseUrl = 'https://cdn.jsdelivr.net/npm/vue3-sfc-loader@0.8.4/dist/';\n\nexport const wabtjsUrl = 'https://cdn.jsdelivr.net/npm/wabt@1.0.26/index.js';\n\nexport const waveDromBaseUrl = 'https://cdn.jsdelivr.net/npm/wavedrom@2.9.0/';\n", "import type { User } from '../models';\n// eslint-disable-next-line import/no-internal-modules\nimport { safeName } from '../utils/utils';\n\nexport interface GitHubFile {\n  path: string;\n  content: string;\n}\nexport const getGithubHeaders = (user: User, mediaType?: 'object' | 'raw') => ({\n  Accept: `application/vnd.github.v3${mediaType ? '.' + mediaType : ''}+json`,\n  'Content-Type': 'application/json',\n  Authorization: 'token ' + user.token,\n});\n\nexport const repoExists = async (user: User, repo: string) => {\n  try {\n    const res = await fetch(`https://api.github.com/repos/${user.username}/${repo}`, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: getGithubHeaders(user),\n    });\n    return res.ok;\n  } catch {\n    return false;\n  }\n};\n\nconst createRepo = async (user: User, repo: string, privateRepo = false, description?: string) => {\n  const res = await fetch('https://api.github.com/user/repos', {\n    method: 'POST',\n    cache: 'no-store',\n    headers: getGithubHeaders(user),\n    body: JSON.stringify({\n      name: repo,\n      private: privateRepo,\n      ...(privateRepo ? {} : { homepage: `https://${user.username}.github.io/${repo}/` }),\n      ...(description ? { description } : {}),\n    }),\n  });\n  if (!res.ok) {\n    const error = await res.json().then((data) => data.errors[0]?.message);\n    if (error === 'name already exists on this account') {\n      throw new Error('Repo name already exists');\n    }\n    throw new Error('Error creating repo');\n  }\n  return res.json().then((data) => data.name);\n};\n\nconst createFile = async ({\n  user,\n  repo,\n  branch,\n  file,\n  message,\n  initialize = false,\n  encoded = false,\n}: {\n  user: User;\n  repo: string;\n  branch: string;\n  file: GitHubFile;\n  message: string;\n  initialize: boolean;\n  encoded: boolean;\n}) => {\n  const url = `https://api.github.com/repos/${user.username}/${repo}/contents/`;\n  const path = file.path.split('/').slice(0, -1).join('/');\n\n  let sha: string | undefined;\n\n  if (!initialize) {\n    const response = await fetch(url + path, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: getGithubHeaders(user),\n    });\n    if (response.ok) {\n      const files = await response.json();\n      sha = files.find((f: any) => f.path === file.path)?.sha;\n    }\n  }\n  const res = await fetch(url + file.path, {\n    method: 'PUT',\n    cache: 'no-store',\n    headers: getGithubHeaders(user),\n    body: JSON.stringify({\n      message: message || 'deploy',\n      content: encoded ? file.content : btoa(file.content),\n      branch,\n      ...(sha ? { sha } : {}),\n    }),\n  });\n\n  if (!res.ok) {\n    throw new Error('Error creating file');\n  }\n  return res.json();\n};\n\nexport const getContent = async ({\n  user,\n  repo,\n  branch,\n  path,\n}: {\n  user: User;\n  repo: string;\n  branch?: string;\n  path: string;\n}) => {\n  const url =\n    `https://api.github.com/repos/${user.username}/${repo}/contents/${path}` +\n    (branch ? `?ref=${branch}` : '');\n\n  const res = await fetch(url, {\n    method: 'GET',\n    cache: 'no-store',\n    headers: getGithubHeaders(user, 'object'),\n  });\n\n  if (!res.ok) {\n    throw new Error('Error getting file');\n  }\n\n  const result = await res.json();\n\n  // https://docs.github.com/en/rest/repos/contents#size-limits\n  if (result.content === '' && result.encoding === 'none') {\n    const rawRes = await fetch(url, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: getGithubHeaders(user, 'raw'),\n    });\n    if (!rawRes.ok) {\n      throw new Error('Error getting file');\n    }\n\n    if (path.endsWith('.b64')) {\n      result.content = await rawRes.arrayBuffer();\n      result.encoding = 'arrayBuffer';\n    } else {\n      result.content = btoa(await rawRes.text());\n      result.encoding = 'base64';\n    }\n  }\n\n  return result;\n};\n\nconst initializeRepo = async (user: User, repo: string, branch = 'main', readmeContent?: string) =>\n  (\n    await createFile({\n      user,\n      repo,\n      branch,\n      file: { path: 'README.md', content: `${readmeContent || '# ' + repo + '\\n'}` },\n      message: 'initial commit',\n      initialize: true,\n      encoded: false,\n    })\n  )?.commit.sha;\n\nconst getLastCommit = async (user: User, repo: string, branch: string) => {\n  const res = await fetch(\n    `https://api.github.com/repos/${user.username}/${repo}/git/matching-refs/heads/${branch}?per_page=100`,\n    {\n      method: 'GET',\n      cache: 'no-store',\n      headers: getGithubHeaders(user),\n    },\n  );\n  const refs = await res.json();\n\n  if (refs.message === 'Git Repository is empty.') {\n    const commit = await initializeRepo(user, repo, 'main');\n    return branch === 'main' ? commit : null;\n  }\n\n  if (!res.ok) {\n    throw new Error('Error getting last commit');\n  }\n\n  const branchRef = refs.find((ref: any) => ref.ref === `refs/heads/${branch}`);\n\n  if (!branchRef) return null;\n  return branchRef.object.sha;\n};\n\nconst getTree = async (user: User, repo: string, commit: string) => {\n  const res = await fetch(\n    `https://api.github.com/repos/${user.username}/${repo}/commits/${commit}`,\n    {\n      method: 'GET',\n      cache: 'no-store',\n      headers: getGithubHeaders(user),\n    },\n  );\n\n  if (!res.ok) {\n    throw new Error('Error getting commit tree');\n  }\n\n  const data = await res.json();\n  const tree = data?.commit?.tree?.sha;\n\n  if (!tree) return null;\n  return tree;\n};\n\nconst createTree = async (\n  user: User,\n  repo: string,\n  files: GitHubFile[],\n  baseTree: string | null,\n): Promise<string> => {\n  const tree = files.map((file) => ({\n    path: file.path,\n    mode: '100644',\n    type: 'blob',\n    content: file.content,\n  }));\n\n  const res = await fetch(`https://api.github.com/repos/${user.username}/${repo}/git/trees`, {\n    method: 'POST',\n    cache: 'no-store',\n    headers: getGithubHeaders(user),\n    body: JSON.stringify({\n      // eslint-disable-next-line camelcase\n      ...(baseTree ? { base_tree: baseTree } : {}),\n      tree,\n    }),\n  });\n  if (!res.ok) {\n    throw new Error('Error creating tree');\n  }\n  return res.json().then((data) => data.sha);\n};\n\nconst createCommit = async (\n  user: User,\n  repo: string,\n  message: string,\n  tree: string,\n  lastCommit: string | null,\n): Promise<string> => {\n  const res = await fetch(`https://api.github.com/repos/${user.username}/${repo}/git/commits`, {\n    method: 'POST',\n    cache: 'no-store',\n    headers: getGithubHeaders(user),\n    body: JSON.stringify({\n      tree,\n      message: message || 'deploy',\n      ...(lastCommit ? { parents: [lastCommit] } : {}),\n    }),\n  });\n  if (!res.ok) {\n    throw new Error('Error creating commit');\n  }\n  return res.json().then((data) => data.sha);\n};\n\nconst createBranch = async (user: User, repo: string, branch: string, commit: string) => {\n  const res = await fetch(`https://api.github.com/repos/${user.username}/${repo}/git/refs`, {\n    method: 'POST',\n    cache: 'no-store',\n    headers: getGithubHeaders(user),\n    body: JSON.stringify({\n      ref: `refs/heads/${branch}`,\n      sha: commit,\n    }),\n  });\n  if (!res.ok) {\n    throw new Error('Error creating branch');\n  }\n  return true;\n};\n\nconst updateBranch = async (user: User, repo: string, branch: string, commit: string) => {\n  const res = await fetch(\n    `https://api.github.com/repos/${user.username}/${repo}/git/refs/heads/${branch}`,\n    {\n      method: 'PATCH',\n      cache: 'no-store',\n      headers: getGithubHeaders(user),\n      body: JSON.stringify({\n        sha: commit,\n      }),\n    },\n  );\n  if (!res.ok) {\n    throw new Error('Error updating branch');\n  }\n  return true;\n};\n\nexport const commitFiles = async ({\n  files,\n  user,\n  repo,\n  branch,\n  message,\n  newRepo,\n  privateRepo,\n  description,\n  readmeContent,\n  clearPrevious = true,\n}: {\n  files: GitHubFile[];\n  user: User;\n  repo: string;\n  branch: string;\n  message: string;\n  newRepo?: boolean;\n  privateRepo?: boolean;\n  description?: string;\n  readmeContent?: string;\n  clearPrevious?: boolean;\n}) => {\n  let lastCommit: string | null;\n  let tree: string | null;\n  let commit: string | null;\n  let succeeded = false;\n\n  if (newRepo) {\n    repo = safeName(repo, '-').toLowerCase();\n  }\n\n  try {\n    if (newRepo || !(await repoExists(user, repo))) {\n      newRepo = true;\n      await createRepo(user, repo, privateRepo, description);\n      const initialCommit = await initializeRepo(user, repo, 'main', readmeContent);\n      lastCommit = branch === 'main' ? initialCommit : null;\n    } else {\n      lastCommit = await getLastCommit(user, repo, branch);\n    }\n    const baseTree = lastCommit && !clearPrevious ? await getTree(user, repo, lastCommit) : null;\n    tree = await createTree(user, repo, files, baseTree);\n    commit = await createCommit(user, repo, message, tree, lastCommit);\n\n    if (lastCommit) {\n      succeeded = await updateBranch(user, repo, branch, commit);\n    } else {\n      succeeded = await createBranch(user, repo, branch, commit);\n    }\n\n    if (!succeeded) return null;\n\n    return {\n      tree,\n      commit,\n    };\n  } catch (error: any) {\n    return null;\n  }\n};\n\nexport const commitFile = async ({\n  file,\n  user,\n  repo,\n  branch,\n  message,\n  newRepo,\n  privateRepo,\n  description,\n  readmeContent,\n}: {\n  file: GitHubFile;\n  user: User;\n  repo: string;\n  branch: string;\n  message: string;\n  newRepo?: boolean;\n  privateRepo?: boolean;\n  description?: string;\n  readmeContent?: string;\n}) => {\n  try {\n    if (newRepo || !(await repoExists(user, repo))) {\n      newRepo = true;\n      repo = safeName(repo, '-').toLowerCase();\n      await createRepo(user, repo, privateRepo, description);\n      await initializeRepo(user, repo, branch, readmeContent);\n    }\n\n    const result = await createFile({\n      user,\n      repo,\n      branch,\n      file,\n      message,\n      initialize: newRepo || false,\n      encoded: true,\n    });\n\n    return {\n      tree: result?.commit?.tree?.sha,\n      commit: result?.commit?.sha,\n    };\n  } catch (error: any) {\n    return null;\n  }\n};\n\nexport const getUserRepos = async (\n  user: User,\n  reposType: 'all' | 'owner' | 'public' | 'private' | 'member' = 'public',\n) => {\n  let page = 1;\n  const pageSize = 100;\n  const maxPages = 5;\n  const results = [];\n\n  while (page <= maxPages) {\n    const response = await fetch(\n      `https://api.github.com/user/repos?type=${reposType}&per_page=${pageSize}&page=${page}`,\n      {\n        method: 'GET',\n        cache: 'no-store',\n        headers: getGithubHeaders(user),\n      },\n    );\n    page += 1;\n    if (!response.ok) {\n      continue;\n    }\n    const newResults = await response.json();\n    results.push(...newResults.map((repo: any) => repo.name));\n    if (newResults.length < pageSize) {\n      page = maxPages + 1;\n    }\n  }\n  return results;\n};\n", "export const getToolbarElement = () => document.querySelector('#toolbar') as HTMLElement;\nexport const getProjectTitleElement = () => document.querySelector('#project-title') as HTMLElement;\nexport const getEditorContainerElement = () =>\n  document.querySelector('#editor-container') as HTMLElement;\nexport const getEditorsElement = () => document.querySelector('#editors') as HTMLElement;\nexport const getMarkupElement = () => document.querySelector('#markup') as HTMLElement;\nexport const getStyleElement = () => document.querySelector('#style') as HTMLElement;\nexport const getScriptElement = () => document.querySelector('#script') as HTMLElement;\nexport const getOutputElement = () => document.querySelector('#output') as HTMLElement;\nexport const getResultElement = () => document.querySelector('#result') as HTMLElement;\nexport const getResultIFrameElement = () =>\n  document.querySelector('#result > iframe') as HTMLIFrameElement;\nexport const getGutterElement = () =>\n  document.querySelector('#editor-container .gutter') as HTMLElement;\nexport const getLogoLink = () => document.querySelector('#logo a') as HTMLAnchorElement;\nexport const getRunButton = () => document.querySelector('#run-button') as HTMLElement;\nexport const getCodeRunButton = () => document.querySelector('#code-run-button') as HTMLElement;\nexport const getEditorToolbar = () => document.querySelector('#editor-tools') as HTMLElement;\nexport const getCopyButton = () => document.querySelector('#editor-tools #copy-btn') as HTMLElement;\nexport const getUndoButton = () => document.querySelector('#editor-tools #undo-btn') as HTMLElement;\nexport const getRedoButton = () => document.querySelector('#editor-tools #redo-btn') as HTMLElement;\nexport const getFormatButton = () =>\n  document.querySelector('#editor-tools #format-btn') as HTMLElement;\nexport const getEditorModeNode = () => document.querySelector<HTMLElement>('#editor-mode');\nexport const getEditorStatus = () =>\n  document.querySelector('#editor-tools #editor-status') as HTMLElement;\nexport const getExternalResourcesBtn = () =>\n  document.querySelector('#editor-tools #external-resources-btn') as HTMLElement;\nexport const getExternalResourcesMark = () =>\n  document.querySelector('#editor-tools #external-resources-mark') as HTMLElement;\nexport const getResultButton = () => document.querySelector('#result-button') as HTMLElement;\nexport const getFullscreenButton = () =>\n  document.querySelector('#fullscreen-button') as HTMLElement;\nexport const getEditorTitles = () =>\n  document.querySelectorAll<HTMLElement>('.editor-title:not(.hidden)');\nexport const getEditorDivs = () => document.querySelectorAll<HTMLElement>('#editors > .editor');\nexport const getToolspaneElement = () =>\n  document.querySelector('#output #tools-pane') as HTMLElement;\nexport const getToolspaneBar = () =>\n  document.querySelector('#output #tools-pane-bar') as HTMLElement;\nexport const getToolspaneButtons = () =>\n  document.querySelector('#tools-pane-buttons') as HTMLElement;\nexport const getToolspaneTitles = () => document.querySelector<HTMLElement>('#tools-pane-titles');\nexport const getToolspaneLoader = () => document.querySelector<HTMLElement>('#tools-pane-loading');\nexport const getZoomButtonValue = () =>\n  document.querySelector<HTMLElement>('#zoom-button #zoom-value');\nexport const getModalSaveButton = () =>\n  document.querySelector('#modal #prompt-save-btn') as HTMLElement;\nexport const getModalDoNotSaveButton = () =>\n  document.querySelector('#modal #prompt-donot-save-btn') as HTMLElement;\nexport const getModalCancelButton = () =>\n  document.querySelector('#modal #prompt-cancel-btn') as HTMLElement;\n\nexport const getModalRecoverButton = () =>\n  document.querySelector('#modal #prompt-recover-btn') as HTMLElement;\nexport const getModalSavePreviousButton = () =>\n  document.querySelector('#modal #prompt-save-previous-btn') as HTMLElement;\nexport const getModalCancelRecoverButton = () =>\n  document.querySelector('#modal #prompt-cancel-recover-btn') as HTMLElement;\nexport const getModalUnsavedName = () =>\n  document.querySelector('#modal #unsaved-project-name') as HTMLElement;\nexport const getModalUnsavedLastModified = () =>\n  document.querySelector('#modal #unsaved-project-last-modified') as HTMLElement;\nexport const getModalDisableRecoverCheckbox = () =>\n  document.querySelector('#modal #disable-recover-checkbox') as HTMLInputElement;\n\nexport const getLanguageMenuLinks = () =>\n  document.querySelectorAll<HTMLElement>('#select-editor .language-item a');\n\nexport const getLanguageMenuButtons = () =>\n  document.querySelectorAll<HTMLElement>('#select-editor .language-menu-button');\n\nexport const getstyleMenu = () =>\n  document.querySelector<HTMLElement>('#style-selector .dropdown-menu');\n\nexport const getSettingToggles = () =>\n  document.querySelectorAll<HTMLInputElement>('#settings-menu input');\n\nexport const getCssPresetLinks = () =>\n  document.querySelectorAll<HTMLAnchorElement>('#css-preset-menu a');\n\nexport const getSettingsMenuScroller = () =>\n  document.querySelector<HTMLElement>('#settings-menu-container');\nexport const getSettingsButton = () => document.querySelector<HTMLElement>('#settings-button');\n\nexport const getExportJSONLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-json');\n\nexport const getExportResultLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-result');\n\nexport const getExportSourceLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-src');\n\nexport const getExportGithubGistLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-githubGist');\n\nexport const getExportCodepenLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-codepen');\n\nexport const getExportJsfiddleLink = () =>\n  document.querySelector<HTMLAnchorElement>('#export-menu #export-jsfiddle');\n\nexport const getLoginLink = () => document.querySelector<HTMLAnchorElement>('#login-link');\n\nexport const getLogoutLink = () => document.querySelector<HTMLAnchorElement>('#logout-link');\n\nexport const getNewLink = () => document.querySelector<HTMLAnchorElement>('#new-link');\n\nexport const getOpenLink = () => document.querySelector<HTMLAnchorElement>('#open-link');\n\nexport const getSaveLink = () => document.querySelector<HTMLAnchorElement>('#save-link');\n\nexport const getForkLink = () => document.querySelector<HTMLAnchorElement>('#fork-link');\n\nexport const getSaveAsTemplateLink = () =>\n  document.querySelector<HTMLAnchorElement>('#template-link');\n\nexport const getExternalResourcesLink = () =>\n  document.querySelector<HTMLAnchorElement>('#external-resources-link');\n\nexport const getCustomSettingsLink = () =>\n  document.querySelector<HTMLAnchorElement>('#custom-settings-link');\n\nexport const getShareLink = () => document.querySelector<HTMLAnchorElement>('#share-link');\n\nexport const getEmbedLink = () => document.querySelector<HTMLAnchorElement>('#embed-link');\n\nexport const getEditorSettingsLink = () =>\n  document.querySelector<HTMLAnchorElement>('#editor-settings-link');\n\nexport const getDeployLink = () => document.querySelector<HTMLAnchorElement>('#deploy-link');\n\nexport const getSyncLink = () => document.querySelector<HTMLAnchorElement>('#sync-link');\n\nexport const getImportLink = () => document.querySelector<HTMLAnchorElement>('#import-link');\n\nexport const getBackupLink = () => document.querySelector<HTMLAnchorElement>('#backup-link');\n\nexport const getBroadcastLink = () => document.querySelector<HTMLAnchorElement>('#broadcast-link');\n\nexport const getAutoupdateToggle = () =>\n  document.querySelector('#settings-menu input#autoupdate') as HTMLInputElement;\n\nexport const getDelayValue = () =>\n  document.querySelector('#settings-menu #delay-value') as HTMLElement;\n\nexport const getDelayRange = () =>\n  document.querySelector('#settings-menu input#delay-range') as HTMLInputElement;\n\nexport const getAutosaveToggle = () =>\n  document.querySelector('#settings-menu input#autosave') as HTMLInputElement;\n\nexport const getAutosyncToggle = () =>\n  document.querySelector('#settings-menu input#autosync') as HTMLInputElement;\n\nexport const getFormatOnsaveToggle = () =>\n  document.querySelector('#settings-menu input#formatOnsave') as HTMLInputElement;\n\nexport const getProcessorToggles = () =>\n  document.querySelectorAll<HTMLInputElement>('#style-selector input');\n\nexport const getEmmetToggle = () =>\n  document.querySelector('#settings-menu input#emmet') as HTMLInputElement;\n\nexport const getThemeToggle = () =>\n  document.querySelector('#settings-menu input#theme') as HTMLInputElement;\n\nexport const getRecoverToggle = () =>\n  document.querySelector('#settings-menu input#recover-unsaved') as HTMLInputElement;\n\nexport const getSpacingToggle = () =>\n  document.querySelector('#settings-menu input#show-spacing') as HTMLInputElement;\n\nexport const getCSSPresetLinks = () =>\n  document.querySelectorAll<HTMLAnchorElement>('#css-preset-menu a');\n\nexport const getProjectInfoLink = () =>\n  document.querySelector('#settings-menu #info-link') as HTMLInputElement;\n\nexport const getAssetsLink = () =>\n  document.querySelector('#settings-menu #assets-link') as HTMLInputElement;\n\nexport const getSnippetsLink = () =>\n  document.querySelector('#settings-menu #snippets-link') as HTMLInputElement;\n\nexport const getInfoTitleInput = () =>\n  document.querySelector('#info-container input#title-input') as HTMLInputElement;\n\nexport const getInfoDescription = () =>\n  document.querySelector('#info-container #description-textarea') as HTMLTextAreaElement;\n\nexport const getInfoTagsInput = () =>\n  document.querySelector('#info-container input#tags-input') as HTMLInputElement;\n\nexport const getSaveInfoButton = () =>\n  document.querySelector<HTMLElement>('#info-container #info-save-btn');\n\nexport const getExternalResourcesTextareas = () =>\n  document.querySelectorAll<HTMLTextAreaElement>('#resources-container textarea');\n\nexport const getLoadResourcesButton = () =>\n  document.querySelector<HTMLElement>('#resources-container #resources-load-btn');\n\nexport const getCustomSettingsEditor = () =>\n  document.querySelector<HTMLElement>('#custom-settings-container #custom-settings-editor');\n\nexport const getLoadCustomSettingsButton = () =>\n  document.querySelector<HTMLElement>('#custom-settings-container #custom-settings-load-btn');\n\nexport const getTestEditor = () =>\n  document.querySelector<HTMLElement>('#test-editor-container #test-editor');\n\nexport const getLoadTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-editor-container #test-load-btn');\n\nexport const getEditTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-container #edit-tests-btn');\n\nexport const getRunTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-container #run-tests-btn');\n\nexport const getWatchTestsButton = () =>\n  document.querySelector<HTMLElement>('#test-container #watch-tests-btn');\n\nexport const getUrlImportForm = (importContainer: HTMLElement) =>\n  importContainer.querySelector<HTMLFormElement>('#url-import-form');\nexport const getUrlImportButton = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#url-import-btn') as HTMLButtonElement;\nexport const getUrlImportInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#code-url') as HTMLInputElement;\nexport const getCodeImportInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#local-code-input') as HTMLInputElement;\n\nexport const getImportJsonUrlForm = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#json-url-import-form') as HTMLInputElement;\nexport const getImportJsonUrlButton = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#json-url-import-btn') as HTMLInputElement;\nexport const getImportJsonUrlInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#json-url') as HTMLInputElement;\n\nexport const getBulkImportJsonUrlForm = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-json-url-import-form') as HTMLInputElement;\nexport const getBulkImportJsonUrlButton = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-json-url-import-btn') as HTMLInputElement;\nexport const getBulkImportJsonUrlInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-json-url') as HTMLInputElement;\nexport const getLinkToSavedProjects = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#link-to-saved-projects') as HTMLAnchorElement;\n\nexport const getImportFileInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#file-input') as HTMLInputElement;\n\nexport const getBulkImportFileInput = (importContainer: HTMLElement) =>\n  importContainer.querySelector('#bulk-file-input') as HTMLInputElement;\n\nexport const getNewRepoForm = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector<HTMLFormElement>('#new-repo-form');\nexport const getNewRepoButton = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-btn') as HTMLButtonElement;\nexport const getNewRepoNameInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-name') as HTMLInputElement;\nexport const getNewRepoNameError = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-name-error') as HTMLElement;\nexport const getNewRepoMessageInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-message') as HTMLInputElement;\nexport const getNewRepoCommitSource = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-source') as HTMLInputElement;\nexport const getNewRepoAutoSync = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#new-repo-autosync') as HTMLInputElement;\n\nexport const getExistingRepoForm = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector<HTMLFormElement>('#existing-repo-form');\nexport const getExistingRepoButton = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-btn') as HTMLButtonElement;\nexport const getExistingRepoNameInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-name') as HTMLInputElement;\nexport const getExistingRepoMessageInput = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-message') as HTMLInputElement;\nexport const getExistingRepoCommitSource = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-source') as HTMLInputElement;\nexport const getExistingRepoAutoSync = (deployContainer: HTMLElement) =>\n  deployContainer.querySelector('#existing-repo-autosync') as HTMLInputElement;\n\nexport const getStarterTemplatesTab = (templatesContainer: HTMLElement) =>\n  templatesContainer.querySelector<HTMLElement>(\n    '#templates-tabs [data-target=\"templates-starter\"]',\n  );\nexport const getStarterTemplatesList = (templatesContainer: HTMLElement) =>\n  templatesContainer.querySelector<HTMLElement>('#starter-templates-list');\nexport const getUserTemplatesScreen = (templatesContainer: HTMLElement) =>\n  templatesContainer.querySelector('#templates-user .modal-screen') as HTMLElement;\n\nexport const getBulkImportButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#bulk-import-button') as HTMLElement;\n\nexport const getExportAllButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#export-all-button') as HTMLElement;\n\nexport const getDeleteAllButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#delete-all-button') as HTMLElement;\n\nexport const getAddAssetButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#assets-add-asset-button') as HTMLElement;\n\nexport const getAssetsDeleteAllButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#assets-delete-all-button') as HTMLElement;\n\nexport const getAssetsButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#assets-button') as HTMLElement;\n\nexport const getAssetDataUrlFileInput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-data-url-file-input') as HTMLInputElement;\n\nexport const getAssetDataUrlOutput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#data-url-output') as HTMLElement;\n\nexport const getAssetGHPagesFileInput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-gh-pages-file-input') as HTMLInputElement;\n\nexport const getAssetGHPagesFileInputLabel = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-gh-pages-file-input-label') as HTMLElement;\n\nexport const getAssetGHPagesFileInputButton = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#asset-gh-pages-file-input-button') as HTMLElement;\n\nexport const getAssetGHPagesOutput = (listContainer: HTMLElement) =>\n  listContainer.querySelector('#gh-pages-output') as HTMLElement;\n\nexport const getSyncStatus = (syncContainer: HTMLElement | undefined) =>\n  (syncContainer || document).querySelector<HTMLElement>('#sync-status');\n\nexport const getStartSyncBtns = (syncContainer: HTMLElement | undefined) =>\n  (syncContainer || document).querySelectorAll<HTMLButtonElement>('.start-sync-btn');\n\nexport const getBackupForm = (backupContainer: HTMLElement) =>\n  backupContainer.querySelector('#backup-form') as HTMLFormElement;\n\nexport const getBackupBtn = (backupContainer: HTMLElement) =>\n  backupContainer.querySelector('#backup-btn') as HTMLButtonElement;\n\nexport const getBackupCheckedInputs = (backupContainer: HTMLElement) =>\n  backupContainer.querySelectorAll<HTMLInputElement>('#backup input[type=\"checkbox\"]:checked');\n\nexport const getAddSnippetButton = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#snippets-add-snippet-button') as HTMLElement;\n\nexport const getSnippetsDeleteAllButton = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#snippets-delete-all-button') as HTMLElement;\n\nexport const getSnippetLanguageSelect = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#language-select') as HTMLSelectElement;\n\nexport const getAddSnippetEditor = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-editor') as HTMLElement;\n\nexport const getSnippetTitleInput = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-title-input') as HTMLInputElement;\n\nexport const getSnippetDescriptionArea = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-description-textarea') as HTMLTextAreaElement;\n\nexport const getSaveSnippetBtn = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#add-snippet-save-btn') as HTMLButtonElement;\n\nexport const getSnippetsBtn = (snippetsContainer: HTMLElement) =>\n  snippetsContainer.querySelector('#snippets-button') as HTMLButtonElement;\n\nexport const getBroadcastStatusLabel = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-status') as HTMLElement;\n\nexport const getBroadcastForm = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-form') as HTMLFormElement;\n\nexport const getBroadcastServerUrlInput = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-server-url') as HTMLInputElement;\n\nexport const getBroadcastSourceCheckbox = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-source') as HTMLInputElement;\n\nexport const getBroadcastBtn = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-btn') as HTMLButtonElement;\n\nexport const getBroadcastChannelUrlSection = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-channel-url-section') as HTMLElement;\n\nexport const getBroadcastChannelUrl = (broadcastContainer: HTMLElement) =>\n  broadcastContainer.querySelector('#broadcast-channel-url') as HTMLAnchorElement;\n\nexport const getBroadcastStatusBtn = () =>\n  document.querySelector('#broadcast-status-btn') as HTMLElement | null;\n\nexport const getQrCodeContainer = () => document.querySelector('#qrcode-container') as HTMLElement;\n\nexport const getEditorSettingsFormatLink = (editorSettingsContainer: HTMLElement) =>\n  editorSettingsContainer.querySelector('#editor-settings-format-link') as HTMLAnchorElement;\n", "/* eslint-disable import/no-internal-modules */\nimport type { createEventsManager } from '../events';\nimport type { createModal } from '../modal';\nimport type { createNotifications } from '../notifications';\nimport type { User, UserData } from '../models';\nimport type { Stores } from '../storage';\nimport { syncScreen } from '../html';\nimport { autoCompleteUrl } from '../vendors';\nimport { getUserRepos } from '../services/github';\nimport {\n  getExistingRepoAutoSync,\n  getExistingRepoForm,\n  getExistingRepoNameInput,\n  getNewRepoAutoSync,\n  getNewRepoForm,\n  getNewRepoNameInput,\n  getStartSyncBtns,\n  getSyncLink,\n  getSyncStatus,\n} from './selectors';\n\nconst createSyncContainer = (\n  eventsManager: ReturnType<typeof createEventsManager>,\n  repo: string | null | undefined,\n) => {\n  const div = document.createElement('div');\n  div.innerHTML = syncScreen;\n  const syncContainer = div.firstChild as HTMLElement;\n\n  const tabs = syncContainer.querySelectorAll<HTMLElement>('#sync-tabs li');\n  tabs.forEach((tab) => {\n    eventsManager.addEventListener(tab, 'click', () => {\n      tabs.forEach((t) => t.classList.remove('active'));\n      tab.classList.add('active');\n\n      document.querySelectorAll('#sync-screens > div').forEach((screen) => {\n        screen.classList.remove('active');\n      });\n      const target = syncContainer.querySelector('#' + tab.dataset.target);\n      target?.classList.add('active');\n      target?.querySelector('input')?.focus();\n    });\n  });\n\n  if (repo) {\n    setTimeout(() => {\n      tabs[1].click();\n      const existingRepoNameInput = getExistingRepoNameInput(syncContainer);\n      existingRepoNameInput.value = repo;\n    });\n  }\n\n  return syncContainer;\n};\n\nconst syncInProgressMessage = 'Sync in progress...';\nexport const isSyncInProgress = () => getSyncLink()?.dataset.hint === syncInProgressMessage;\n\nexport const updateSyncStatus = ({\n  inProgress,\n  lastSync,\n  syncContainer,\n}: {\n  inProgress?: boolean;\n  lastSync?: number;\n  syncContainer?: HTMLElement;\n}) => {\n  const syncLink = getSyncLink();\n  const syncStatus = getSyncStatus(syncContainer);\n  const startSyncBtns = getStartSyncBtns(syncContainer);\n\n  const lastSyncMessage = lastSync ? `Last sync: ${new Date(lastSync).toLocaleString()}` : '';\n  if (syncStatus) {\n    syncStatus.innerText = lastSyncMessage;\n  }\n\n  if (inProgress ?? isSyncInProgress()) {\n    if (syncLink) {\n      syncLink.classList.add('hint--bottom');\n      syncLink.dataset.hint = syncInProgressMessage;\n    }\n    startSyncBtns?.forEach((btn) => {\n      btn.innerHTML = syncInProgressMessage;\n      btn.disabled = true;\n    });\n  } else {\n    if (syncLink) {\n      syncLink.classList.toggle('hint--bottom', Boolean(lastSyncMessage));\n      syncLink.dataset.hint = lastSyncMessage;\n    }\n    startSyncBtns?.forEach((btn) => {\n      btn.innerHTML = 'Sync';\n      btn.disabled = false;\n    });\n  }\n};\n\nexport const createSyncUI = async ({\n  baseUrl,\n  modal,\n  notifications,\n  eventsManager,\n  user,\n  stores,\n  deps,\n}: {\n  baseUrl: string;\n  modal: ReturnType<typeof createModal>;\n  notifications: ReturnType<typeof createNotifications>;\n  eventsManager: ReturnType<typeof createEventsManager>;\n  user: User;\n  stores: Stores;\n  deps: {\n    getSyncData: () => Promise<UserData['data']['sync'] | null>;\n    setSyncData: (syncData: UserData['data']['sync']) => Promise<void>;\n  };\n}) => {\n  const syncData = await deps.getSyncData();\n  const syncContainer = createSyncContainer(eventsManager, syncData?.repo);\n\n  const newRepoForm = getNewRepoForm(syncContainer);\n  const newRepoNameInput = getNewRepoNameInput(syncContainer);\n  const newRepoAutoSync = getNewRepoAutoSync(syncContainer);\n  const existingRepoForm = getExistingRepoForm(syncContainer);\n  const existingRepoNameInput = getExistingRepoNameInput(syncContainer);\n  const existingRepoAutoSync = getExistingRepoAutoSync(syncContainer);\n\n  updateSyncStatus({ inProgress: isSyncInProgress(), lastSync: syncData?.lastSync, syncContainer });\n\n  // start loading the module\n  const syncModule: Promise<typeof import('../sync/sync')> = import(baseUrl + '{{hash:sync.js}}');\n\n  const sync = (user: User, repo: string, newRepo: boolean) => {\n    notifications.info('Sync started...');\n    modal.close();\n\n    return syncModule\n      .then(async (mod) => {\n        const syncResult = await mod.sync({\n          user,\n          repo,\n          newRepo,\n          stores,\n        });\n        if (!syncResult) {\n          notifications.error('Sync failed!');\n          return;\n        }\n        notifications.success('Sync complete!');\n      })\n      .catch(() => {\n        notifications.error('Sync failed!');\n      });\n  };\n\n  eventsManager.addEventListener(newRepoForm, 'submit', async (e) => {\n    e.preventDefault();\n    if (!user || isSyncInProgress()) return;\n\n    const repo = newRepoNameInput.value;\n    const autosync = newRepoAutoSync.checked;\n\n    const newRepo = true;\n    if (!repo) {\n      notifications.error('Repo name is required');\n      return;\n    }\n\n    updateSyncStatus({ inProgress: true });\n\n    await sync(user, repo, newRepo);\n    const lastSync = Date.now();\n    await deps.setSyncData({ autosync, repo, lastSync });\n\n    updateSyncStatus({ inProgress: false, lastSync });\n  });\n\n  eventsManager.addEventListener(existingRepoForm, 'submit', async (e) => {\n    e.preventDefault();\n    if (!user || isSyncInProgress()) return;\n\n    const repo = existingRepoNameInput.value;\n    const autosync = existingRepoAutoSync.checked;\n\n    const newRepo = false;\n    if (!repo) {\n      notifications.error('Repo name is required');\n      return;\n    }\n\n    updateSyncStatus({ inProgress: true });\n\n    await sync(user, repo, newRepo);\n    const lastSync = Date.now();\n    await deps.setSyncData({ autosync, repo, lastSync });\n\n    updateSyncStatus({ inProgress: false, lastSync });\n  });\n\n  let autoComplete: any;\n  import(autoCompleteUrl).then(async () => {\n    autoComplete = (globalThis as any).autoComplete;\n\n    if (!user) return;\n    const repos = await getUserRepos(user, 'all');\n\n    eventsManager.addEventListener(existingRepoNameInput, 'init', () => {\n      existingRepoNameInput.focus();\n    });\n\n    const inputSelector = '#' + existingRepoNameInput.id;\n    if (!document.querySelector(inputSelector)) return;\n    const autoCompleteJS = new autoComplete({\n      selector: inputSelector,\n      placeHolder: 'Search your repos...',\n      data: {\n        src: repos,\n      },\n      resultItem: {\n        highlight: {\n          render: true,\n        },\n      },\n    });\n\n    eventsManager.addEventListener(autoCompleteJS.input, 'selection', function (event: any) {\n      const feedback = event.detail;\n      autoCompleteJS.input.blur();\n      const selection = feedback.selection.value;\n      autoCompleteJS.input.value = selection;\n    });\n  });\n\n  modal.show(syncContainer, { isAsync: true });\n  newRepoNameInput.focus();\n};\n"],
  "mappings": "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",
  "names": ["autoCompleteUrl", "getGithubHeaders", "user", "mediaType", "getUserRepos", "user", "reposType", "page", "pageSize", "maxPages", "results", "response", "getGithubHeaders", "newResults", "repo", "getSyncLink", "getNewRepoForm", "deployContainer", "getNewRepoNameInput", "deployContainer", "getNewRepoAutoSync", "deployContainer", "getExistingRepoForm", "getExistingRepoNameInput", "deployContainer", "getExistingRepoAutoSync", "deployContainer", "getSyncStatus", "syncContainer", "getStartSyncBtns", "createSyncContainer", "eventsManager", "repo", "div", "sync_default", "syncContainer", "tabs", "tab", "t", "screen", "target", "existingRepoNameInput", "getExistingRepoNameInput", "syncInProgressMessage", "isSyncInProgress", "getSyncLink", "updateSyncStatus", "inProgress", "lastSync", "syncLink", "syncStatus", "getSyncStatus", "startSyncBtns", "getStartSyncBtns", "lastSyncMessage", "btn", "createSyncUI", "baseUrl", "modal", "notifications", "user", "stores", "deps", "syncData", "newRepoForm", "getNewRepoForm", "newRepoNameInput", "getNewRepoNameInput", "newRepoAutoSync", "getNewRepoAutoSync", "existingRepoForm", "getExistingRepoForm", "existingRepoAutoSync", "getExistingRepoAutoSync", "syncModule", "sync", "newRepo", "mod", "e", "autosync", "autoComplete", "autoCompleteUrl", "repos", "getUserRepos", "inputSelector", "autoCompleteJS", "event", "feedback", "selection"]
}
