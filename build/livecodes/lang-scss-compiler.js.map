{
  "version": 3,
  "sources": ["../../src/livecodes/utils/utils.ts", "../../src/livecodes/languages/scss/lang-scss-compiler.ts"],
  "sourcesContent": ["import { Config, Language, Processor } from '../models';\n\nexport const debounce = (fn: (...x: any[]) => any, delay: number | (() => number)) => {\n  let timeout: any;\n\n  return (...args: unknown[]) => {\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => fn.apply(null, args), typeof delay === 'function' ? delay() : delay);\n  };\n};\n\nexport const decodeHTML = (html: string) => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nexport const encodeHTML = (html: string) =>\n  html\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/'/g, '&#39;')\n    .replace(/\"/g, '&#34;');\n\nexport const escapeScript = (code: string) => code.replace(/<\\/script>/g, '<\\\\/script>');\n\nexport const escapeCode = (code: string, slash = true) =>\n  code\n    .replace(/\\\\/g, slash ? '\\\\\\\\' : '\\\\')\n    .replace(/`/g, '\\\\`')\n    .replace(/<\\/script>/g, '<\\\\/script>');\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const pipe = (...fns: Function[]) =>\n  fns.reduce(\n    (f, g) =>\n      (...args: any) =>\n        g(f(...args)),\n  );\n\n// replace non-alphanumeric with underscore\nexport const safeName = (name: string, symbol = '_') => name.replace(/[\\W]+/g, symbol);\n\n// from https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\n// added safari (on mac & ios): monaco editor is broken on safari\nexport const isMobile = () => {\n  let mobile = false;\n  const userAgent = navigator.userAgent.toLowerCase();\n  (function (a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      mobile = true;\n    }\n  })(userAgent || navigator.vendor || (window as any).opera);\n\n  const safari = userAgent.indexOf('safari') > -1 && userAgent.indexOf('chrome') === -1; // chrome says it is safari!\n\n  return mobile || safari;\n};\n\nexport const isRelativeUrl = (url?: string) =>\n  !url?.startsWith('http') && !url?.startsWith('data:');\n\nexport const getAbsoluteUrl = (url: string, baseUrl = document.baseURI) =>\n  isRelativeUrl(url) ? new URL(url, baseUrl).href : url;\n\nexport const cloneObject = <T>(x: Record<string, any>): T => JSON.parse(JSON.stringify(x));\n\nexport const objectMap = (\n  obj: Record<string, any>,\n  fn: (value: any, key: string, index: number) => any,\n) => Object.fromEntries(Object.entries(obj).map(([k, v], i) => [k, fn(v, k, i)]));\n\nexport const objectFilter = (\n  obj: Record<string, any>,\n  predicate: (value: any, key: string, index: number) => any,\n) => Object.fromEntries(Object.entries(obj).filter(([k, v], i) => predicate(v, k, i)));\n\nexport const copyToClipboard = (text: string) => {\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    const textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      // eslint-disable-next-line no-console\n      console.warn('Copy to clipboard failed.', ex);\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\n\nexport const stringToValidJson = (str: string) =>\n  str\n    .replace(/'[^'\"]*'(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/g, function replaceSingleQuotes(matchedStr) {\n      return '\"' + matchedStr.substring(1, matchedStr.length - 1) + '\"';\n    })\n    .replace(\n      /(\\w+(?=([^\"\\\\]*(\\\\.|\"([^\"\\\\]*\\\\.)*[^\"\\\\]*\"))*[^\"]*$))(\\s*:)(?!(\\w*)(?:\"))/gm,\n      function quoteNonQuoted(matchedStr) {\n        return '\"' + matchedStr.substring(0, matchedStr.length - 1).trimEnd() + '\":';\n      },\n    )\n    .replace(/,\\s*([\\]}])/g, '$1'); // remove trailing comma\n\nexport const stringify = (obj: any, pretty = false) => {\n  try {\n    return JSON.stringify(obj, undefined, pretty ? 2 : undefined);\n  } catch {\n    return '';\n  }\n};\n\nexport const getRandomString = () => String(Math.random()) + '-' + Date.now().toFixed();\n\nexport const downloadFile = (filename: string, extension: string, content: string) => {\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = content;\n  a.download = safeName(filename) + '.' + extension;\n  a.click();\n  a.remove();\n};\n\nexport const loadScript = (url: string, name?: string) =>\n  new Promise((resolve, reject) => {\n    if (name && (window as any)[name]) {\n      return resolve((window as any)[name]);\n    }\n\n    const script = document.createElement('script');\n    script.src = url;\n    script.async = true;\n    const removeEventListeners = () => {\n      script.removeEventListener('load', onLoad);\n      script.removeEventListener('error', onError);\n    };\n    const onLoad = () => {\n      removeEventListeners();\n      if (!name) {\n        return resolve('loaded: ' + url);\n      }\n      const i = setInterval(() => {\n        if ((window as any)[name]) {\n          clearInterval(i);\n          return resolve((window as any)[name]);\n        }\n      }, 5);\n    };\n    const onError = () => {\n      removeEventListeners();\n      reject('failed to load: ' + url);\n    };\n    script.addEventListener('load', onLoad);\n    script.addEventListener('error', onError);\n    document.head.appendChild(script);\n  });\n\nexport const loadStylesheet = (url: string, id?: string, insertBefore?: string) => {\n  if (id && document.getElementById(id)) return;\n  const stylesheet = document.createElement('link');\n  stylesheet.rel = 'stylesheet';\n  stylesheet.href = url;\n  stylesheet.id = id || 'styles-' + getRandomString();\n  document.head.insertBefore(\n    stylesheet,\n    insertBefore ? document.querySelector(insertBefore) : null,\n  );\n};\n\nexport const typedArrayToBuffer = (array: Uint8Array): ArrayBuffer =>\n  array.buffer.slice(array.byteOffset, array.byteLength + array.byteOffset);\n\nexport const getDate = () => {\n  let date = new Date();\n  const offset = date.getTimezoneOffset();\n  date = new Date(date.getTime() - offset * 60 * 1000);\n  return date.toISOString().split('T')[0];\n};\n\nexport const handleFetchError = (res: Response) => (res.ok ? res : Promise.reject());\nexport const fetchWithHandler = (input: RequestInfo, init?: RequestInit) =>\n  fetch(input, init).then(handleFetchError);\n\nexport const blobToBase64 = (file: Blob): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => (typeof reader.result === 'string' ? resolve(reader.result) : reject());\n    reader.onerror = (error) => reject(error);\n  });\n\nexport const Uint8ArrayToBase64 = (u8: Uint8Array) => {\n  const CHUNK_SZ = 0x8000;\n  const c = [];\n  for (let i = 0; i < u8.length; i += CHUNK_SZ) {\n    c.push(String.fromCharCode.apply(null, (u8 as any).subarray(i, i + CHUNK_SZ)));\n  }\n  return btoa(c.join(''));\n};\n\nexport const base64ToUint8Array = (str: string) =>\n  new Uint8Array(\n    atob(str)\n      .split('')\n      .map((c) => c.charCodeAt(0)),\n  );\n\nexport const typedArraysAreEqual = (a: Uint8Array, b: Uint8Array) => {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const getWorkerDataURL = (url: string) => {\n  const content = `importScripts(\"${url}\");`;\n  return 'data:text/javascript;base64,' + btoa(content);\n};\n\nexport const removeComments = (src: string) =>\n  src.replace(/\\/\\*[\\s\\S]*?\\*\\/|([^\\\\:]|^)\\/\\/.*$/gm, '$1');\n\nexport const removeStrings = (src: string) =>\n  src\n    .replace(/'[^\\n']*'/gm, \"''\")\n    .replace(/\"[^\\n\"]*\"/gm, '\"\"')\n    .replace(/`[^`]*`/gm, '``');\n\nexport const removeCommentsAndStrings = (src: string) => removeStrings(removeComments(src));\n\nexport const getLanguageCustomSettings = (language: Language | Processor, config: Config) => ({\n  ...(config.customSettings as any)[language],\n});\n\nexport const getValidUrl = (url?: string) => {\n  if (!url) return null;\n  let validUrl = null;\n  if (url.startsWith('http') || url.startsWith('data:')) {\n    try {\n      validUrl = new URL(url).href;\n    } catch {\n      try {\n        validUrl = new URL(decodeURIComponent(url)).href;\n      } catch {\n        //\n      }\n    }\n  }\n  return validUrl;\n};\n\nexport const runOrContinue =\n  <T>(fn: (x: T) => Promise<T>, catchFn?: (err: unknown) => void) =>\n  async (x: T): Promise<T> => {\n    try {\n      const result = await fn(x);\n      return result;\n    } catch (error) {\n      if (typeof catchFn === 'function') {\n        catchFn(error);\n      }\n      return x;\n    }\n  };\n\nexport const getFileExtension = (file: string) => file.split('.')[file.split('.').length - 1];\n\nexport const isInIframe = () => {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n};\n\nexport const indentCode = (code: string, spaces: number, skipFirstLine = true) =>\n  (skipFirstLine ? '' : ' '.repeat(spaces)) + code.split('\\n').join('\\n' + ' '.repeat(spaces));\n", "import type { CompilerFunction } from '../../models';\nimport { getLanguageCustomSettings } from '../../utils';\n\n(self as any).createScssCompiler = (): CompilerFunction => {\n  const sass = (window as any).sass;\n  return async (code, { config, language }): Promise<string> => {\n    const syntax = language === 'sass' ? 'indented' : 'scss';\n    const customSettings = getLanguageCustomSettings(language, config);\n    let baseUrl: string | null = null;\n\n    const moduleServiceUrl = 'https://cdn.jsdelivr.net/npm/';\n\n    const fetchStyles = (url: string) => {\n      const moduleUrl =\n        baseUrl && baseUrl !== url ? new URL(url.replace(moduleServiceUrl, ''), baseUrl).href : url;\n      const module = moduleUrl.replace(moduleServiceUrl, '');\n      const moduleParts = module.split('/');\n\n      if (\n        moduleParts.length === 1 ||\n        (moduleParts.length === 2 && moduleParts[0].startsWith('@'))\n      ) {\n        return Promise.reject('not a valid URL!');\n      }\n\n      return fetch(moduleUrl)\n        .then((res) => {\n          if (!res.ok) return Promise.reject('URL not found: ' + moduleUrl);\n          return res.text();\n        })\n        .then((contents) => {\n          const result = {\n            contents,\n            syntax,\n          };\n          return result;\n        });\n    };\n\n    const result = await sass.compileStringAsync(code, {\n      ...customSettings,\n      syntax,\n      importers: [\n        {\n          canonicalize(url: string) {\n            return new URL(url, moduleServiceUrl);\n          },\n          load(canonicalUrl: URL) {\n            const urlString = canonicalUrl.href;\n            return fetchStyles(urlString)\n              .catch(() => {\n                const urlParts = urlString.split('/');\n                const filename = urlParts[urlParts.length - 1];\n                const prefix = filename.startsWith('_') ? '' : '_';\n                urlParts[urlParts.length - 1] = prefix + filename + '.scss';\n                return fetchStyles(urlParts.join('/'));\n              })\n              .catch(() => fetchStyles(urlString + '.scss'))\n              .catch(\n                () =>\n                  new Promise((resolve, reject) => {\n                    fetch(urlString + '/package.json')\n                      .then((res) => res.json())\n                      .then((pkg) => {\n                        if (pkg.sass) {\n                          baseUrl = urlString + '/' + pkg.sass;\n                          resolve(fetchStyles(baseUrl));\n                        } else if (pkg.style) {\n                          baseUrl = urlString + '/' + pkg.style;\n                          resolve(fetchStyles(baseUrl));\n                        } else {\n                          reject('Not found');\n                        }\n                      });\n                  }),\n              );\n          },\n        },\n      ],\n    });\n\n    return result.css || '';\n  };\n};\n"],
  "mappings": "mBA4PO,IAAMA,EAA4B,CAACC,EAAgCC,KAAoB,CAC5F,GAAIA,EAAO,eAAuBD,EACpC,GC3PC,KAAa,mBAAqB,IAAwB,CACzD,IAAME,EAAQ,OAAe,KAC7B,MAAO,OAAOC,EAAM,CAAE,OAAAC,EAAQ,SAAAC,CAAS,IAAuB,CAC5D,IAAMC,EAASD,IAAa,OAAS,WAAa,OAC5CE,EAAiBC,EAA0BH,EAAUD,CAAM,EAC7DK,EAAyB,KAEvBC,EAAmB,gCAEnBC,EAAeC,GAAgB,CACnC,IAAMC,EACJJ,GAAWA,IAAYG,EAAM,IAAI,IAAIA,EAAI,QAAQF,EAAkB,EAAE,EAAGD,CAAO,EAAE,KAAOG,EAEpFE,EADSD,EAAU,QAAQH,EAAkB,EAAE,EAC1B,MAAM,GAAG,EAEpC,OACEI,EAAY,SAAW,GACtBA,EAAY,SAAW,GAAKA,EAAY,GAAG,WAAW,GAAG,EAEnD,QAAQ,OAAO,kBAAkB,EAGnC,MAAMD,CAAS,EACnB,KAAME,GACAA,EAAI,GACFA,EAAI,KAAK,EADI,QAAQ,OAAO,kBAAoBF,CAAS,CAEjE,EACA,KAAMG,IACU,CACb,SAAAA,EACA,OAAAV,CACF,EAED,CACL,EA4CA,OA1Ce,MAAMJ,EAAK,mBAAmBC,EAAM,CACjD,GAAGI,EACH,OAAAD,EACA,UAAW,CACT,CACE,aAAaM,EAAa,CACxB,OAAO,IAAI,IAAIA,EAAKF,CAAgB,CACtC,EACA,KAAKO,EAAmB,CACtB,IAAMC,EAAYD,EAAa,KAC/B,OAAON,EAAYO,CAAS,EACzB,MAAM,IAAM,CACX,IAAMC,EAAWD,EAAU,MAAM,GAAG,EAC9BE,EAAWD,EAASA,EAAS,OAAS,GACtCE,EAASD,EAAS,WAAW,GAAG,EAAI,GAAK,IAC/C,OAAAD,EAASA,EAAS,OAAS,GAAKE,EAASD,EAAW,QAC7CT,EAAYQ,EAAS,KAAK,GAAG,CAAC,CACvC,CAAC,EACA,MAAM,IAAMR,EAAYO,EAAY,OAAO,CAAC,EAC5C,MACC,IACE,IAAI,QAAQ,CAACI,EAASC,IAAW,CAC/B,MAAML,EAAY,eAAe,EAC9B,KAAMH,GAAQA,EAAI,KAAK,CAAC,EACxB,KAAMS,GAAQ,CACTA,EAAI,MACNf,EAAUS,EAAY,IAAMM,EAAI,KAChCF,EAAQX,EAAYF,CAAO,CAAC,GACnBe,EAAI,OACbf,EAAUS,EAAY,IAAMM,EAAI,MAChCF,EAAQX,EAAYF,CAAO,CAAC,GAE5Bc,EAAO,WAAW,CAEtB,CAAC,CACL,CAAC,CACL,CACJ,CACF,CACF,CACF,CAAC,GAEa,KAAO,EACvB,CACF",
  "names": ["getLanguageCustomSettings", "language", "config", "sass", "code", "config", "language", "syntax", "customSettings", "getLanguageCustomSettings", "baseUrl", "moduleServiceUrl", "fetchStyles", "url", "moduleUrl", "moduleParts", "res", "contents", "canonicalUrl", "urlString", "urlParts", "filename", "prefix", "resolve", "reject", "pkg"]
}
