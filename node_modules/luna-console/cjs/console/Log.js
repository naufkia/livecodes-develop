"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getAbstract_1 = __importDefault(require("./getAbstract"));
// @ts-ignore
const luna_object_viewer_1 = __importDefault(require("luna-object-viewer"));
const isObj_1 = __importDefault(require("licia/isObj"));
const isStr_1 = __importDefault(require("licia/isStr"));
const isErr_1 = __importDefault(require("licia/isErr"));
const isPrimitive_1 = __importDefault(require("licia/isPrimitive"));
const defaults_1 = __importDefault(require("licia/defaults"));
const isEl_1 = __importDefault(require("licia/isEl"));
const toStr_1 = __importDefault(require("licia/toStr"));
const toNum_1 = __importDefault(require("licia/toNum"));
const toInt_1 = __importDefault(require("licia/toInt"));
const escape_1 = __importDefault(require("licia/escape"));
const isNull_1 = __importDefault(require("licia/isNull"));
const isUndef_1 = __importDefault(require("licia/isUndef"));
const isFn_1 = __importDefault(require("licia/isFn"));
const toArr_1 = __importDefault(require("licia/toArr"));
const isArr_1 = __importDefault(require("licia/isArr"));
const unique_1 = __importDefault(require("licia/unique"));
const contain_1 = __importDefault(require("licia/contain"));
const isEmpty_1 = __importDefault(require("licia/isEmpty"));
const clone_1 = __importDefault(require("licia/clone"));
const noop_1 = __importDefault(require("licia/noop"));
const each_1 = __importDefault(require("licia/each"));
const trim_1 = __importDefault(require("licia/trim"));
const lowerCase_1 = __importDefault(require("licia/lowerCase"));
const keys_1 = __importDefault(require("licia/keys"));
const _1 = __importDefault(require("licia/$"));
const h_1 = __importDefault(require("licia/h"));
const Emitter_1 = __importDefault(require("licia/Emitter"));
const stringifyAll_1 = __importDefault(require("licia/stringifyAll"));
const nextTick_1 = __importDefault(require("licia/nextTick"));
const linkify_1 = __importDefault(require("licia/linkify"));
const highlight_1 = __importDefault(require("licia/highlight"));
const util_1 = require("./util");
const stripIndent_1 = __importDefault(require("licia/stripIndent"));
const js_beautify_1 = __importDefault(require("js-beautify"));
const regJsUrl = /https?:\/\/([0-9.\-A-Za-z]+)(?::(\d+))?\/[A-Z.a-z0-9/]*\.js/g;
const emptyHighlightStyle = {
    comment: '',
    string: '',
    number: '',
    keyword: '',
    operator: '',
};
class Log extends Emitter_1.default {
    constructor(console, { type = 'log', args = [], id, group, targetGroup, header, ignoreFilter = false, accessGetter, unenumerable, lazyEvaluation, }) {
        super();
        this.container = h_1.default('div');
        this.count = 1;
        this.width = 0;
        this.height = 0;
        this.console = console;
        this.type = type;
        this.group = group;
        this.targetGroup = targetGroup;
        this.args = args;
        this.id = id;
        this.header = header;
        this.ignoreFilter = ignoreFilter;
        this.collapsed = false;
        this.container.log = this;
        this.height = 0;
        this.width = 0;
        this.$container = _1.default(this.container);
        this.accessGetter = accessGetter;
        this.unenumerable = unenumerable;
        this.lazyEvaluation = lazyEvaluation;
        this.formatMsg();
        if (this.group) {
            this.checkGroup();
        }
    }
    // If state changed, return true.
    checkGroup() {
        let { group } = this;
        let collapsed = false;
        while (group) {
            if (group.collapsed) {
                collapsed = true;
                break;
            }
            group = group.parent;
        }
        if (collapsed !== this.collapsed) {
            this.collapsed = collapsed;
            return true;
        }
        return false;
    }
    updateIcon(icon) {
        const { c } = this.console;
        const $icon = this.$container.find(c('.icon'));
        $icon.rmAttr('class').addClass([c('icon'), c(`icon-${icon}`)]);
        return this;
    }
    addCount() {
        this.count++;
        const { $container, count } = this;
        const { c } = this.console;
        const $countContainer = $container.find(c('.count-container'));
        const $icon = $container.find(c('.icon-container'));
        const $count = $countContainer.find(c('.count'));
        if (count === 2) {
            $countContainer.rmClass(c('hidden'));
        }
        $count.text(toStr_1.default(count));
        $icon.addClass(c('hidden'));
        return this;
    }
    groupEnd() {
        const { $container } = this;
        const { c } = this.console;
        const $lastNesting = $container
            .find(`.${c('nesting-level')}:not(.${c('group-closed')})`)
            .last();
        $lastNesting.addClass(c('group-closed'));
        return this;
    }
    updateTime(time) {
        const $timeContainer = this.$container.find(this.console.c('.time-container'));
        if (this.header) {
            $timeContainer.find('span').eq(0).text(time);
            this.header.time = time;
        }
        return this;
    }
    isAttached() {
        return !!this.container.parentNode;
    }
    updateSize(silent = true) {
        const height = this.container.offsetHeight;
        const width = this.container.offsetWidth;
        if (this.height !== height || this.width !== width) {
            this.height = height;
            this.width = width;
            if (!silent)
                this.emit('updateSize');
        }
    }
    html() {
        return this.container.outerHTML;
    }
    text() {
        return this.content.textContent || '';
    }
    needSrc() {
        const { type, args } = this;
        if (type === 'html')
            return false;
        for (let i = 0, len = args.length; i < len; i++) {
            if (isObj_1.default(args[i]))
                return true;
        }
        return false;
    }
    extractObj(cb = noop_1.default) {
        const { args, type } = this;
        const setSrc = (result) => {
            this.src = result;
            cb();
        };
        if (type === 'table') {
            this._extractObj(args[0], {}, setSrc);
        }
        else {
            this._extractObj(args.length === 1 && isObj_1.default(args[0]) ? args[0] : args, {}, setSrc);
        }
    }
    _extractObj(obj, options = {}, cb) {
        const { accessGetter, unenumerable } = this;
        defaults_1.default(options, {
            accessGetter,
            unenumerable,
            symbol: unenumerable,
            timeout: 1000,
        });
        stringify(obj, options, (result) => cb(JSON.parse(result)));
    }
    click() {
        const { type, src, $container, console, unenumerable, accessGetter } = this;
        const { c } = console;
        let { args } = this;
        switch (type) {
            case 'log':
            case 'warn':
            case 'debug':
            case 'output':
            case 'table':
            case 'dir':
            case 'group':
            case 'groupCollapsed':
                if (src || args) {
                    const $json = $container.find(c('.json'));
                    if ($json.hasClass(c('hidden'))) {
                        if ($json.data('init') !== 'true') {
                            if (src) {
                                const staticViewer = new luna_object_viewer_1.default.Static($json.get(0));
                                staticViewer.set(src);
                                staticViewer.on('change', () => this.updateSize(false));
                            }
                            else {
                                if (type === 'table' || args.length === 1) {
                                    if (isObj_1.default(args[0]))
                                        args = args[0];
                                }
                                const objViewer = new luna_object_viewer_1.default($json.get(0), {
                                    unenumerable,
                                    accessGetter,
                                });
                                objViewer.set(args);
                                objViewer.on('change', () => this.updateSize(false));
                            }
                            $json.data('init', 'true');
                        }
                        $json.rmClass(c('hidden'));
                    }
                    else {
                        $json.addClass(c('hidden'));
                    }
                }
                else if (type === 'group' || type === 'groupCollapsed') {
                    console.toggleGroup(this);
                }
                break;
            case 'error':
                $container.find(c('.stack')).toggleClass(c('hidden'));
                break;
        }
        this.updateSize(false);
    }
    formatMsg() {
        let { args } = this;
        const { type, id, header, group, lazyEvaluation } = this;
        const { c } = this.console;
        // Don't change original args for lazy evaluation.
        args = clone_1.default(args);
        if (this.needSrc() && !lazyEvaluation) {
            this.extractObj();
        }
        let msg = '';
        let icon;
        let err;
        if (type === 'group' || type === 'groupCollapsed') {
            if (args.length === 0) {
                args = ['console.group'];
            }
        }
        switch (type) {
            case 'log':
                msg = this.formatCommon(args);
                break;
            case 'debug':
                msg = this.formatCommon(args);
                break;
            case 'dir':
                msg = this.formatDir(args);
                break;
            case 'warn':
                icon = 'warn';
                msg = this.formatCommon(args);
                break;
            case 'error':
                if (isStr_1.default(args[0]) && args.length !== 1)
                    args = this.substituteStr(args);
                err = args[0];
                icon = 'error';
                err = isErr_1.default(err) ? err : new Error(this.formatCommon(args));
                this.src = err;
                msg = this.formatErr(err);
                break;
            case 'table':
                msg = this.formatTable(args);
                break;
            case 'html':
                msg = args[0];
                break;
            case 'input':
                msg = this.formatJs(args[0]);
                icon = 'input';
                break;
            case 'output':
                msg = this.formatCommon(args);
                icon = 'output';
                break;
            case 'groupCollapsed':
                msg = this.formatCommon(args);
                icon = 'caret-right';
                break;
            case 'group':
                msg = this.formatCommon(args);
                icon = 'caret-down';
                break;
        }
        if (!this.needSrc() || !lazyEvaluation) {
            delete this.args;
        }
        // Only linkify for simple types
        if (type !== 'error' && !this.args) {
            msg = linkify_1.default(msg, (url) => {
                return `<a href="${url}" target="_blank">${url}</a>`;
            });
        }
        msg = this.render({ msg, type, icon, id, header, group });
        this.$container.addClass(`${c('log-container')}`).html(msg);
        this.$content = this.$container.find(c('.log-content'));
        this.content = this.$content.get(0);
    }
    render(data) {
        const { c } = this.console;
        let html = '';
        let indent = '';
        if (data.group) {
            const { indentLevel } = data.group;
            for (let i = 0; i < indentLevel; i++) {
                indent += `<div class="${c('nesting-level')}"></div>`;
            }
        }
        if (data.header) {
            html += stripIndent_1.default `
      <div class="${c('header')}">
        ${indent}
        <div class="${c('time-from-container')}">
          <span>${data.header.time}</span> <span>${data.header.from}</span>
        </div>
      </div>`;
        }
        let icon = '';
        if (data.icon) {
            icon = `<div class="${c('icon-container')}"><span class="${c('icon icon-' + data.icon)}"></span></div>`;
        }
        html += `
    <div class="${c(data.type + ' log-item')}">
      ${indent}
      ${icon}
      <div class="${c('count-container hidden')}">
        <div class="${c('count')}"></div>
      </div>    
      <div class="${c('log-content-wrapper')}">
        <div class="${c('log-content')}">${data.msg}</div>
      </div>
    </div>`;
        return html;
    }
    formatTable(args) {
        const Value = '__LunaConsoleValue';
        const table = args[0];
        let ret = '';
        let filter = args[1];
        let columns = [];
        if (isStr_1.default(filter))
            filter = toArr_1.default(filter);
        if (!isArr_1.default(filter))
            filter = null;
        if (!isObj_1.default(table))
            return this.formatCommon(args);
        each_1.default(table, (val) => {
            if (isPrimitive_1.default(val)) {
                columns.push(Value);
            }
            else if (isObj_1.default(val)) {
                columns = columns.concat(keys_1.default(val));
            }
        });
        columns = unique_1.default(columns);
        columns.sort();
        if (filter)
            columns = columns.filter((val) => contain_1.default(filter, val));
        if (columns.length > 20)
            columns = columns.slice(0, 20);
        if (isEmpty_1.default(columns))
            return this.formatCommon(args);
        ret += '<table><thead><tr><th>(index)</th>';
        columns.forEach((val) => (ret += `<th>${val === Value ? 'Value' : toStr_1.default(val)}</th>`));
        ret += '</tr></thead><tbody>';
        each_1.default(table, (obj, idx) => {
            ret += `<tr><td>${idx}</td>`;
            columns.forEach((column) => {
                if (isObj_1.default(obj)) {
                    ret +=
                        column === Value
                            ? '<td></td>'
                            : `<td>${this.formatTableVal(obj[column])}</td>`;
                }
                else if (isPrimitive_1.default(obj)) {
                    ret +=
                        column === Value
                            ? `<td>${this.formatTableVal(obj)}</td>`
                            : '<td></td>';
                }
            });
            ret += '</tr>';
        });
        ret += '</tbody></table>';
        ret += `<div class="${this.console.c('json hidden')}"></div>`;
        return ret;
    }
    formatErr(err) {
        let lines = err.stack ? err.stack.split('\n') : [];
        const msg = `${err.message || lines[0]}<br/>`;
        lines = lines.map((val) => escape_1.default(val));
        const stack = `<div class="${this.console.c('stack hidden')}">${lines
            .slice(1)
            .join('<br/>')}</div>`;
        return (msg +
            stack.replace(regJsUrl, (match) => `<a href="${match}" target="_blank">${match}</a>`));
    }
    formatCommon(args, { htmlForEl = true } = {}) {
        const needStrSubstitution = isStr_1.default(args[0]) && args.length !== 1;
        if (needStrSubstitution)
            args = this.substituteStr(args);
        for (let i = 0, len = args.length; i < len; i++) {
            let val = args[i];
            if (isEl_1.default(val) && htmlForEl) {
                args[i] = this.formatEl(val);
            }
            else if (isFn_1.default(val)) {
                args[i] = this.formatJs(val);
            }
            else if (isObj_1.default(val)) {
                args[i] = this.formatObj(val);
            }
            else if (isUndef_1.default(val)) {
                args[i] = 'undefined';
            }
            else if (isNull_1.default(val)) {
                args[i] = 'null';
            }
            else {
                val = toStr_1.default(val);
                if (i !== 0 || !needStrSubstitution)
                    val = escape_1.default(val);
                args[i] = val;
            }
        }
        return (args.join(' ') + `<div class="${this.console.c('json hidden')}"></div>`);
    }
    formatDir(args) {
        return this.formatCommon(args, { htmlForEl: false });
    }
    formatTableVal(val) {
        if (isObj_1.default(val))
            return (val = '{…}');
        if (isPrimitive_1.default(val))
            return this.getAbstract(val);
        return toStr_1.default(val);
    }
    getAbstract(obj) {
        return (`<span class="${this.console.c('abstract')}">` +
            getAbstract_1.default(obj, {
                getterVal: this.accessGetter,
                unenumerable: false,
            }) +
            '</span>');
    }
    substituteStr(args) {
        const str = escape_1.default(args[0]);
        let isInCss = false;
        let newStr = '';
        args.shift();
        for (let i = 0, len = str.length; i < len; i++) {
            const c = str[i];
            if (c === '%' && args.length !== 0) {
                i++;
                const arg = args.shift();
                switch (str[i]) {
                    case 'i':
                    case 'd':
                        newStr += toInt_1.default(arg);
                        break;
                    case 'f':
                        newStr += toNum_1.default(arg);
                        break;
                    case 's':
                        newStr += toStr_1.default(arg);
                        break;
                    case 'O':
                        if (isObj_1.default(arg)) {
                            newStr += this.getAbstract(arg);
                        }
                        break;
                    case 'o':
                        if (isEl_1.default(arg)) {
                            newStr += this.formatEl(arg);
                        }
                        else if (isObj_1.default(arg)) {
                            newStr += this.getAbstract(arg);
                        }
                        break;
                    case 'c':
                        if (str.length <= i + 1) {
                            break;
                        }
                        if (isInCss)
                            newStr += '</span>';
                        isInCss = true;
                        newStr += `<span style="${correctStyle(arg)}">`;
                        break;
                    default:
                        i--;
                        args.unshift(arg);
                        newStr += c;
                }
            }
            else {
                newStr += c;
            }
        }
        if (isInCss)
            newStr += '</span>';
        args.unshift(newStr);
        return args;
    }
    formatJs(val) {
        return `<pre class="${this.console.c('code')}">${this.console.c(highlight_1.default(js_beautify_1.default(val, { indent_size: 2 }), 'js', emptyHighlightStyle))}</pre>`;
    }
    formatObj(val) {
        let type = util_1.getObjType(val);
        if (type === 'Array' && val.length > 1)
            type = `(${val.length})`;
        return `${type} ${this.getAbstract(val)}`;
    }
    formatEl(val) {
        const { c } = this.console;
        return `<pre class="${c('code')}">${c(highlight_1.default(js_beautify_1.default.html(val.outerHTML, { unformatted: [], indent_size: 2 }), 'html', emptyHighlightStyle))}</pre>`;
    }
}
exports.default = Log;
function correctStyle(val) {
    val = lowerCase_1.default(val);
    const rules = val.split(';');
    const style = {};
    each_1.default(rules, (rule) => {
        if (!contain_1.default(rule, ':'))
            return;
        const [name, val] = rule.split(':');
        style[trim_1.default(name)] = trim_1.default(val);
    });
    style['display'] = 'inline-block';
    style['max-width'] = '100%';
    delete style.width;
    delete style.height;
    let ret = '';
    each_1.default(style, (val, key) => {
        ret += `${key}:${val};`;
    });
    return ret;
}
function stringify(obj, options, cb) {
    const result = stringifyAll_1.default(obj, options);
    nextTick_1.default(() => cb(result));
}
