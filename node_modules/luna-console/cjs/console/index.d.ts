import Log from './Log';
import types from 'licia/types';
import Component from '../share/Component';
interface IOptions {
    maxNum?: number;
    asyncRender?: boolean;
    showHeader?: boolean;
    accessGetter?: boolean;
    unenumerable?: boolean;
    lazyEvaluation?: boolean;
    filter?: string | RegExp | types.AnyFn;
}
export default class Console extends Component<IOptions> {
    renderViewport: (options?: any) => void;
    private $el;
    private el;
    private $fakeEl;
    private fakeEl;
    private $space;
    private space;
    private spaceHeight;
    private topSpaceHeight;
    private bottomSpaceHeight;
    private lastScrollTop;
    private lastTimestamp;
    private speedToleranceFactor;
    private maxSpeedTolerance;
    private minSpeedTolerance;
    private logs;
    private displayLogs;
    private timer;
    private counter;
    private lastLog?;
    private asyncList;
    private asyncTimer;
    private isAtBottom;
    private groupStack;
    private global;
    constructor(container: HTMLElement, { maxNum, asyncRender, showHeader, filter, accessGetter, unenumerable, lazyEvaluation, }?: IOptions);
    setGlobal(name: string, val: any): void;
    destroy(): void;
    count(label?: string): void;
    countReset(label?: string): void;
    assert(...args: any[]): void;
    log(...args: any[]): void;
    debug(...args: any[]): void;
    dir(obj: any): void;
    table(...args: any[]): void;
    time(name?: string): void;
    timeLog(name?: string): void;
    timeEnd(name?: string): void;
    clear(silent?: boolean): void;
    info(...args: any[]): void;
    error(...args: any[]): void;
    warn(...args: any[]): void;
    group(...args: any[]): void;
    groupCollapsed(...args: any[]): void;
    groupEnd(): void;
    evaluate(code: string): void;
    html(...args: any): void;
    toggleGroup(log: Log): void;
    private output;
    private render;
    private insert;
    private insertAsync;
    private insertSync;
    private updateTopSpace;
    private updateBottomSpace;
    private updateSpace;
    private detachLog;
    private attachLog;
    private handleAsyncList;
    private injectGlobal;
    private clearGlobal;
    private evalJs;
    private filterLog;
    private collapseGroup;
    private openGroup;
    private updateGroup;
    private bindEvent;
    private onScroll;
    private _renderViewport;
    private initTpl;
}
export {};
