"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortObjName = exports.getFnAbstract = exports.encode = void 0;
const toStr_1 = __importDefault(require("licia/toStr"));
const trim_1 = __importDefault(require("licia/trim"));
const toNum_1 = __importDefault(require("licia/toNum"));
const startWith_1 = __importDefault(require("licia/startWith"));
const escape_1 = __importDefault(require("licia/escape"));
exports.encode = (str) => {
    return escape_1.default(toStr_1.default(str))
        .replace(/\n/g, '↵')
        .replace(/\f|\r|\t/g, '');
};
function getFnAbstract(str) {
    if (str.length > 500)
        str = str.slice(0, 500) + '...';
    return 'ƒ ' + trim_1.default(extractFnHead(str).replace('function', ''));
}
exports.getFnAbstract = getFnAbstract;
const regFnHead = /function(.*?)\((.*?)\)/;
function extractFnHead(str) {
    const fnHead = str.match(regFnHead);
    if (fnHead)
        return fnHead[0];
    return str;
}
// $, upperCase, lowerCase, _
function sortObjName(a, b) {
    a = toStr_1.default(a);
    b = toStr_1.default(b);
    const numA = toNum_1.default(a);
    const numB = toNum_1.default(b);
    if (!isNaN(numA) && !isNaN(numB)) {
        if (numA > numB)
            return 1;
        if (numA < numB)
            return -1;
        return 0;
    }
    if (startWith_1.default(a, 'get ') || startWith_1.default(a, 'set '))
        a = a.slice(4);
    if (startWith_1.default(b, 'get ') || startWith_1.default(b, 'set '))
        b = b.slice(4);
    const lenA = a.length;
    const lenB = b.length;
    const len = lenA > lenB ? lenB : lenA;
    for (let i = 0; i < len; i++) {
        const codeA = a.charCodeAt(i);
        const codeB = b.charCodeAt(i);
        const cmpResult = cmpCode(codeA, codeB);
        if (cmpResult !== 0)
            return cmpResult;
    }
    if (lenA > lenB)
        return 1;
    if (lenA < lenB)
        return -1;
    return 0;
}
exports.sortObjName = sortObjName;
function cmpCode(a, b) {
    a = transCode(a);
    b = transCode(b);
    if (a > b)
        return 1;
    if (a < b)
        return -1;
    return 0;
}
function transCode(code) {
    // _ should be placed after lowercase chars.
    if (code === 95)
        return 123;
    return code;
}
