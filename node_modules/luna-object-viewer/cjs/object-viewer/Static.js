"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getObjAbstract = void 0;
const _1 = __importDefault(require("licia/$"));
const startWith_1 = __importDefault(require("licia/startWith"));
const isObj_1 = __importDefault(require("licia/isObj"));
const uniqId_1 = __importDefault(require("licia/uniqId"));
const upperFirst_1 = __importDefault(require("licia/upperFirst"));
const toNum_1 = __importDefault(require("licia/toNum"));
const chunk_1 = __importDefault(require("licia/chunk"));
const each_1 = __importDefault(require("licia/each"));
const isNaN_1 = __importDefault(require("licia/isNaN"));
const isNum_1 = __importDefault(require("licia/isNum"));
const isBool_1 = __importDefault(require("licia/isBool"));
const isStr_1 = __importDefault(require("licia/isStr"));
const keys_1 = __importDefault(require("licia/keys"));
const lowerCase_1 = __importDefault(require("licia/lowerCase"));
const Emitter_1 = __importDefault(require("licia/Emitter"));
const util_1 = require("./util");
const util_2 = require("../share/util");
const c = util_2.classPrefix('object-viewer');
class JsonViewer extends Emitter_1.default {
    constructor(container) {
        super();
        this.onItemClick = (e) => {
            const { map } = this;
            const $this = _1.default(e.curTarget);
            const circularId = $this.data('object-id');
            const $firstSpan = $this.find('span').eq(0);
            if ($this.data('first-level'))
                return;
            if (circularId) {
                $this.find('ul').html(this.objToHtml(map[circularId], false));
                $this.rmAttr('data-object-id');
            }
            e.stopImmediatePropagation();
            if (!$firstSpan.hasClass(c('expanded')))
                return;
            const $ul = $this.find('ul').eq(0);
            if ($firstSpan.hasClass(c('collapsed'))) {
                $firstSpan.rmClass(c('collapsed'));
                $ul.show();
            }
            else {
                $firstSpan.addClass(c('collapsed'));
                $ul.hide();
            }
            this.emit('change');
        };
        this.$container = _1.default(container);
        this.$container.addClass('luna-object-viewer');
        this.bindEvent();
    }
    set(data) {
        if (isStr_1.default(data))
            data = JSON.parse(data);
        this.data = {
            id: uniqId_1.default('json'),
            enumerable: {
                0: data,
            },
        };
        this.map = {};
        createMap(this.map, this.data);
        this.appendTpl();
    }
    destroy() {
        this.$container.off('click', 'li', this.onItemClick);
        this.$container.rmClass('luna-object-viewer');
        this.$container.html('');
    }
    objToHtml(data, firstLevel) {
        let ret = '';
        each_1.default(['enumerable', 'unenumerable', 'symbol'], (type) => {
            if (!data[type])
                return;
            const typeKeys = keys_1.default(data[type]);
            typeKeys.sort(util_1.sortObjName);
            for (let i = 0, len = typeKeys.length; i < len; i++) {
                const key = typeKeys[i];
                ret += this.createEl(key, data[type][key], type, firstLevel);
            }
        });
        if (data.proto) {
            if (ret === '') {
                ret = this.objToHtml(data.proto);
            }
            else {
                ret += this.createEl('__proto__', data.proto, 'proto');
            }
        }
        return ret;
    }
    createEl(key, val, keyType, firstLevel = false) {
        let type = typeof val;
        if (val === null) {
            return `<li>${wrapKey(key)}<span class="${c('null')}">null</span></li>`;
        }
        else if (isNum_1.default(val) || isBool_1.default(val)) {
            return `<li>${wrapKey(key)}<span class="${c(type)}">${util_1.encode(val)}</span></li>`;
        }
        if (val.type === 'RegExp')
            type = 'regexp';
        if (val.type === 'Number')
            type = 'number';
        if (val.type === 'Number' || val.type === 'RegExp') {
            return `<li>${wrapKey(key)}<span class="${c(type)}">${util_1.encode(val.value)}</span></li>`;
        }
        else if (val.type === 'Undefined' || val.type === 'Symbol') {
            return `<li>${wrapKey(key)}<span class="${c('special')}">${lowerCase_1.default(val.type)}</span></li>`;
        }
        else if (val === '(...)') {
            return `<li>${wrapKey(key)}<span class="${c('special')}">${val}</span></li>`;
        }
        else if (isObj_1.default(val)) {
            const id = val.id;
            const referenceId = val.reference;
            const objAbstract = getObjAbstract(val) || upperFirst_1.default(type);
            const icon = firstLevel
                ? ''
                : `<span class="${c('expanded collapsed')}"><span class="${c('icon icon-caret-right')}"></span><span class="${c('icon icon-caret-down')}"></span></span>`;
            let obj = `<li ${firstLevel ? 'data-first-level="true"' : ''} ${'data-object-id="' + (referenceId || id) + '"'}>${icon}${wrapKey(key)}<span class="${c('open')}">${firstLevel ? '' : objAbstract}</span><ul class="${c(type)}" ${firstLevel ? '' : 'style="display:none"'}>`;
            if (firstLevel)
                obj += this.objToHtml(this.map[id]);
            return obj + `</ul><span class="${c('close')}"></span></li>`;
        }
        function wrapKey(key) {
            if (firstLevel)
                return '';
            if (isObj_1.default(val) && val.jsonSplitArr)
                return '';
            let keyClass = c('key');
            if (keyType === 'unenumerable' ||
                keyType === 'proto' ||
                keyType === 'symbol') {
                keyClass = c('key-lighter');
            }
            return `<span class="${keyClass}">${util_1.encode(key)}</span>: `;
        }
        return `<li>${wrapKey(key)}<span class="${c(typeof val)}">"${util_1.encode(val)}"</span></li>`;
    }
    appendTpl() {
        const data = this.map[this.data.id];
        this.$container.html(this.objToHtml(data, true));
    }
    bindEvent() {
        this.$container.on('click', 'li', this.onItemClick);
    }
}
exports.default = JsonViewer;
function createMap(map, data) {
    const id = data.id;
    if (!id && id !== 0)
        return;
    const isArr = data.type && startWith_1.default(data.type, 'Array');
    if (isArr && data.enumerable) {
        const arr = objToArr(data, id, data.type);
        if (arr.length > 100)
            data = splitBigArr(arr);
    }
    map[id] = data;
    const values = [];
    each_1.default(['enumerable', 'unenumerable', 'symbol'], (type) => {
        if (!data[type])
            return;
        for (const key in data[type]) {
            values.push(data[type][key]);
        }
    });
    if (data.proto) {
        values.push(data.proto);
    }
    for (let i = 0, len = values.length; i < len; i++) {
        const val = values[i];
        if (isObj_1.default(val))
            createMap(map, val);
    }
}
function splitBigArr(data) {
    let idx = 0;
    const enumerable = {};
    each_1.default(chunk_1.default(data, 100), (val) => {
        const obj = {};
        const startIdx = idx;
        obj.type = '[' + startIdx;
        obj.enumerable = {};
        each_1.default(val, (val) => {
            obj.enumerable[idx] = val;
            idx += 1;
        });
        const endIdx = idx - 1;
        obj.type += (endIdx - startIdx > 0 ? ' â€¦ ' + endIdx : '') + ']';
        obj.id = uniqId_1.default('json');
        obj.jsonSplitArr = true;
        enumerable[idx] = obj;
    });
    const ret = {};
    ret.enumerable = enumerable;
    ret.id = data.id;
    ret.type = data.type;
    if (data.unenumerable)
        ret.unenumerable = data.unenumerable;
    if (data.symbol)
        ret.symbol = data.symbol;
    if (data.proto)
        ret.proto = data.proto;
    return ret;
}
function objToArr(data, id, type) {
    const ret = [];
    const enumerable = {};
    each_1.default(data.enumerable, (val, key) => {
        const idx = toNum_1.default(key);
        if (!isNaN_1.default(idx)) {
            ret[idx] = val;
        }
        else {
            enumerable[key] = val;
        }
    });
    ret.enumerable = enumerable;
    ret.type = type;
    ret.id = id;
    if (data.unenumerable)
        ret.unenumerable = data.unenumerable;
    if (data.symbol)
        ret.symbol = data.symbol;
    if (data.proto)
        ret.proto = data.proto;
    return ret;
}
function getObjAbstract(data) {
    const { type, value } = data;
    if (!type)
        return;
    if (type === 'Function') {
        return util_1.getFnAbstract(value);
    }
    if (type === 'Array' && data.unenumerable) {
        return `Array(${data.unenumerable.length})`;
    }
    return data.type;
}
exports.getObjAbstract = getObjAbstract;
